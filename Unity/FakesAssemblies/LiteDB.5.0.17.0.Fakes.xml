<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiteDB.5.0.17.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:LiteDB.Engine.Fakes.ShimAesStream">
            <summary>LiteDB.Engine.AesStream 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimAesStream.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimAesStream.#ctor(LiteDB.Engine.AesStream)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimAesStream.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.CanReadGet">
            <summary>设置 AesStream.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.CanSeekGet">
            <summary>设置 AesStream.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.CanWriteGet">
            <summary>设置 AesStream.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.DisposeBoolean">
            <summary>设置 AesStream.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.Flush">
            <summary>设置 AesStream.Flush() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.IsBlankByteArrayInt32">
            <summary>设置 AesStream.IsBlank(Byte[] array, Int32 offset) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.LengthGet">
            <summary>设置 AesStream.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.PositionGet">
            <summary>设置 AesStream.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.PositionSetInt64">
            <summary>设置 AesStream.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>设置 AesStream.Read(Byte[] array, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.SaltGet">
            <summary>设置 AesStream.get_Salt() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.SeekInt64SeekOrigin">
            <summary>设置 AesStream.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.SetLengthInt64">
            <summary>设置 AesStream.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.StreamPositionGet">
            <summary>设置 AesStream.get_StreamPosition() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>设置 AesStream.Write(Byte[] array, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimAesStream.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimAesStream.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimAesStream.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.CanReadGet">
            <summary>设置 AesStream.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.CanSeekGet">
            <summary>设置 AesStream.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.CanWriteGet">
            <summary>设置 AesStream.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.ConstructorStringStream">
            <summary>设置 AesStream.AesStream(String password, Stream stream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.DisposeBoolean">
            <summary>设置 AesStream.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.Flush">
            <summary>设置 AesStream.Flush() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.IsBlankByteArrayInt32">
            <summary>设置 AesStream.IsBlank(Byte[] array, Int32 offset) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.LengthGet">
            <summary>设置 AesStream.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.NewSalt">
            <summary>设置 AesStream.NewSalt() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.PositionGet">
            <summary>设置 AesStream.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.PositionSetInt64">
            <summary>设置 AesStream.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.ReadByteArrayInt32Int32">
            <summary>设置 AesStream.Read(Byte[] array, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.SaltGet">
            <summary>设置 AesStream.get_Salt() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.SeekInt64SeekOrigin">
            <summary>设置 AesStream.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.SetLengthInt64">
            <summary>设置 AesStream.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.StaticConstructor">
            <summary>设置 AesStream.AesStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.StreamPositionGet">
            <summary>设置 AesStream.get_StreamPosition() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimAesStream.WriteByteArrayInt32Int32">
            <summary>设置 AesStream.Write(Byte[] array, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimEngineSettings">
            <summary>LiteDB.Engine.EngineSettings 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimEngineSettings.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimEngineSettings.#ctor(LiteDB.Engine.EngineSettings)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.CollationGet">
            <summary>设置 EngineSettings.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.CollationSetCollation">
            <summary>设置 EngineSettings.set_Collation(Collation value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.DataStreamGet">
            <summary>设置 EngineSettings.get_DataStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.DataStreamSetStream">
            <summary>设置 EngineSettings.set_DataStream(Stream value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.FilenameGet">
            <summary>设置 EngineSettings.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.FilenameSetString">
            <summary>设置 EngineSettings.set_Filename(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.InitialSizeGet">
            <summary>设置 EngineSettings.get_InitialSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.InitialSizeSetInt64">
            <summary>设置 EngineSettings.set_InitialSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.LogStreamGet">
            <summary>设置 EngineSettings.get_LogStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.LogStreamSetStream">
            <summary>设置 EngineSettings.set_LogStream(Stream value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.PasswordGet">
            <summary>设置 EngineSettings.get_Password() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.PasswordSetString">
            <summary>设置 EngineSettings.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.ReadOnlyGet">
            <summary>设置 EngineSettings.get_ReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.ReadOnlySetBoolean">
            <summary>设置 EngineSettings.set_ReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.TempStreamGet">
            <summary>设置 EngineSettings.get_TempStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.AllInstances.TempStreamSetStream">
            <summary>设置 EngineSettings.set_TempStream(Stream value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimEngineSettings.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimEngineSettings.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.CollationGet">
            <summary>设置 EngineSettings.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.CollationSetCollation">
            <summary>设置 EngineSettings.set_Collation(Collation value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.Constructor">
            <summary>设置 EngineSettings.EngineSettings() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.DataStreamGet">
            <summary>设置 EngineSettings.get_DataStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.DataStreamSetStream">
            <summary>设置 EngineSettings.set_DataStream(Stream value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.FilenameGet">
            <summary>设置 EngineSettings.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.FilenameSetString">
            <summary>设置 EngineSettings.set_Filename(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.InitialSizeGet">
            <summary>设置 EngineSettings.get_InitialSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.InitialSizeSetInt64">
            <summary>设置 EngineSettings.set_InitialSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.LogStreamGet">
            <summary>设置 EngineSettings.get_LogStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.LogStreamSetStream">
            <summary>设置 EngineSettings.set_LogStream(Stream value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.PasswordGet">
            <summary>设置 EngineSettings.get_Password() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.PasswordSetString">
            <summary>设置 EngineSettings.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.ReadOnlyGet">
            <summary>设置 EngineSettings.get_ReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.ReadOnlySetBoolean">
            <summary>设置 EngineSettings.set_ReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.TempStreamGet">
            <summary>设置 EngineSettings.get_TempStream() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimEngineSettings.TempStreamSetStream">
            <summary>设置 EngineSettings.set_TempStream(Stream value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimLiteEngine">
            <summary>LiteDB.Engine.LiteEngine 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimLiteEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimLiteEngine.#ctor(LiteDB.Engine.LiteEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.BeginTrans">
            <summary>设置 LiteEngine.BeginTrans() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.Checkpoint">
            <summary>设置 LiteEngine.Checkpoint() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.Commit">
            <summary>设置 LiteEngine.Commit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.DeleteManyStringBsonExpression">
            <summary>设置 LiteEngine.DeleteMany(String collection, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.DeleteStringIEnumerableOfBsonValue">
            <summary>设置 LiteEngine.Delete(String collection, IEnumerable`1&lt;BsonValue&gt; ids) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.Dispose">
            <summary>设置 LiteEngine.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.DisposeBoolean">
            <summary>设置 LiteEngine.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.DropCollectionString">
            <summary>设置 LiteEngine.DropCollection(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.DropIndexStringString">
            <summary>设置 LiteEngine.DropIndex(String collection, String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.EnsureIndexStringStringBsonExpressionBoolean">
            <summary>设置 LiteEngine.EnsureIndex(String collection, String name, BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.GetCollectionNames">
            <summary>设置 LiteEngine.GetCollectionNames() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.InitializeSystemCollections">
            <summary>设置 LiteEngine.InitializeSystemCollections() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.InsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 LiteEngine.Insert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.PragmaString">
            <summary>设置 LiteEngine.Pragma(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.PragmaStringBsonValue">
            <summary>设置 LiteEngine.Pragma(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.QueryStringQuery">
            <summary>设置 LiteEngine.Query(String collection, Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.RebuildRebuildOptions">
            <summary>设置 LiteEngine.Rebuild(RebuildOptions options) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.RegisterSystemCollectionStringFuncOfIEnumerableOfBsonDocument">
            <summary>设置 LiteEngine.RegisterSystemCollection(String collectionName, Func`1&lt;IEnumerable`1&lt;BsonDocument&gt;&gt; factory) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.RenameCollectionStringString">
            <summary>设置 LiteEngine.RenameCollection(String collection, String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.Rollback">
            <summary>设置 LiteEngine.Rollback() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysCols">
            <summary>设置 LiteEngine.SysCols() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysDatabase">
            <summary>设置 LiteEngine.SysDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysIndexes">
            <summary>设置 LiteEngine.SysIndexes() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysOpenCursors">
            <summary>设置 LiteEngine.SysOpenCursors() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysSequences">
            <summary>设置 LiteEngine.SysSequences() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysSnapshots">
            <summary>设置 LiteEngine.SysSnapshots() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.SysTransactions">
            <summary>设置 LiteEngine.SysTransactions() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.UpdateManyStringBsonExpressionBsonExpression">
            <summary>设置 LiteEngine.UpdateMany(String collection, BsonExpression transform, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.UpdateStringIEnumerableOfBsonDocument">
            <summary>设置 LiteEngine.Update(String collection, IEnumerable`1&lt;BsonDocument&gt; docs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances.UpsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 LiteEngine.Upsert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_0">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_0() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_1">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_1() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_2">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_2() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_3">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_3() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_4">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_4() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_5">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_5() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._InitializeSystemCollectionsb__47_6">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_6() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.AllInstances._Rebuildb__12_0KeyValuePairOfStringUInt32">
            <summary>设置 LiteEngine.&lt;Rebuild&gt;b__12_0(KeyValuePair`2&lt;String,UInt32&gt; c) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.BeginTrans">
            <summary>设置 LiteEngine.BeginTrans() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimLiteEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimLiteEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimLiteEngine.Bind(LiteDB.Engine.ILiteEngine)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimLiteEngine.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.Checkpoint">
            <summary>设置 LiteEngine.Checkpoint() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.Commit">
            <summary>设置 LiteEngine.Commit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.Constructor">
            <summary>设置 LiteEngine.LiteEngine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.ConstructorEngineSettings">
            <summary>设置 LiteEngine.LiteEngine(EngineSettings settings) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.ConstructorString">
            <summary>设置 LiteEngine.LiteEngine(String filename) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.DeleteManyStringBsonExpression">
            <summary>设置 LiteEngine.DeleteMany(String collection, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.DeleteStringIEnumerableOfBsonValue">
            <summary>设置 LiteEngine.Delete(String collection, IEnumerable`1&lt;BsonValue&gt; ids) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.Dispose">
            <summary>设置 LiteEngine.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.DisposeBoolean">
            <summary>设置 LiteEngine.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.DropCollectionString">
            <summary>设置 LiteEngine.DropCollection(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.DropIndexStringString">
            <summary>设置 LiteEngine.DropIndex(String collection, String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.EnsureIndexStringStringBsonExpressionBoolean">
            <summary>设置 LiteEngine.EnsureIndex(String collection, String name, BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.GetCollectionNames">
            <summary>设置 LiteEngine.GetCollectionNames() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.InitializeSystemCollections">
            <summary>设置 LiteEngine.InitializeSystemCollections() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.InsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 LiteEngine.Insert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.PragmaString">
            <summary>设置 LiteEngine.Pragma(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.PragmaStringBsonValue">
            <summary>设置 LiteEngine.Pragma(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.QueryStringQuery">
            <summary>设置 LiteEngine.Query(String collection, Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.RebuildRebuildOptions">
            <summary>设置 LiteEngine.Rebuild(RebuildOptions options) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.RegisterSystemCollectionStringFuncOfIEnumerableOfBsonDocument">
            <summary>设置 LiteEngine.RegisterSystemCollection(String collectionName, Func`1&lt;IEnumerable`1&lt;BsonDocument&gt;&gt; factory) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.RenameCollectionStringString">
            <summary>设置 LiteEngine.RenameCollection(String collection, String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.Rollback">
            <summary>设置 LiteEngine.Rollback() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysCols">
            <summary>设置 LiteEngine.SysCols() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysDatabase">
            <summary>设置 LiteEngine.SysDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysIndexes">
            <summary>设置 LiteEngine.SysIndexes() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysOpenCursors">
            <summary>设置 LiteEngine.SysOpenCursors() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysSequences">
            <summary>设置 LiteEngine.SysSequences() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysSnapshots">
            <summary>设置 LiteEngine.SysSnapshots() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.SysTransactions">
            <summary>设置 LiteEngine.SysTransactions() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.UpdateManyStringBsonExpressionBsonExpression">
            <summary>设置 LiteEngine.UpdateMany(String collection, BsonExpression transform, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.UpdateStringIEnumerableOfBsonDocument">
            <summary>设置 LiteEngine.Update(String collection, IEnumerable`1&lt;BsonDocument&gt; docs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.UpgradeStringStringCollation">
            <summary>设置 LiteEngine.Upgrade(String filename, String password, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine.UpsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 LiteEngine.Upsert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_0">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_0() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_1">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_1() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_2">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_2() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_3">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_3() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_4">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_4() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_5">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_5() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._InitializeSystemCollectionsb__47_6">
            <summary>设置 LiteEngine.&lt;InitializeSystemCollections&gt;b__47_6() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimLiteEngine._Rebuildb__12_0KeyValuePairOfStringUInt32">
            <summary>设置 LiteEngine.&lt;Rebuild&gt;b__12_0(KeyValuePair`2&lt;String,UInt32&gt; c) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimPragmas">
            <summary>LiteDB.Engine.Pragmas 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimPragmas.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimPragmas.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimPragmas.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimPragmas.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimRebuildOptions">
            <summary>LiteDB.Engine.RebuildOptions 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimRebuildOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimRebuildOptions.#ctor(LiteDB.Engine.RebuildOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimRebuildOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.AllInstances.CollationGet">
            <summary>设置 RebuildOptions.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.AllInstances.CollationSetCollation">
            <summary>设置 RebuildOptions.set_Collation(Collation value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.AllInstances.PasswordGet">
            <summary>设置 RebuildOptions.get_Password() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.AllInstances.PasswordSetString">
            <summary>设置 RebuildOptions.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimRebuildOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimRebuildOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.CollationGet">
            <summary>设置 RebuildOptions.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.CollationSetCollation">
            <summary>设置 RebuildOptions.set_Collation(Collation value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.Constructor">
            <summary>设置 RebuildOptions.RebuildOptions() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.PasswordGet">
            <summary>设置 RebuildOptions.get_Password() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimRebuildOptions.PasswordSetString">
            <summary>设置 RebuildOptions.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimTempStream">
            <summary>LiteDB.Engine.TempStream 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimTempStream.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimTempStream.#ctor(LiteDB.Engine.TempStream)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.ShimTempStream.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.CanReadGet">
            <summary>设置 TempStream.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.CanSeekGet">
            <summary>设置 TempStream.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.CanWriteGet">
            <summary>设置 TempStream.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.DisposeBoolean">
            <summary>设置 TempStream.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.FilenameGet">
            <summary>设置 TempStream.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.Flush">
            <summary>设置 TempStream.Flush() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.InDiskGet">
            <summary>设置 TempStream.get_InDisk() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.InMemoryGet">
            <summary>设置 TempStream.get_InMemory() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.LengthGet">
            <summary>设置 TempStream.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.PositionGet">
            <summary>设置 TempStream.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.PositionSetInt64">
            <summary>设置 TempStream.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>设置 TempStream.Read(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.SeekInt64SeekOrigin">
            <summary>设置 TempStream.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.SetLengthInt64">
            <summary>设置 TempStream.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>设置 TempStream.Write(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimTempStream.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimTempStream.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.ShimTempStream.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.CanReadGet">
            <summary>设置 TempStream.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.CanSeekGet">
            <summary>设置 TempStream.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.CanWriteGet">
            <summary>设置 TempStream.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.ConstructorStringInt64">
            <summary>设置 TempStream.TempStream(String filename, Int64 maxMemoryUsage) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.DisposeBoolean">
            <summary>设置 TempStream.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.FilenameGet">
            <summary>设置 TempStream.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.Flush">
            <summary>设置 TempStream.Flush() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.InDiskGet">
            <summary>设置 TempStream.get_InDisk() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.InMemoryGet">
            <summary>设置 TempStream.get_InMemory() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.LengthGet">
            <summary>设置 TempStream.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.PositionGet">
            <summary>设置 TempStream.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.PositionSetInt64">
            <summary>设置 TempStream.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.ReadByteArrayInt32Int32">
            <summary>设置 TempStream.Read(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.SeekInt64SeekOrigin">
            <summary>设置 TempStream.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.SetLengthInt64">
            <summary>设置 TempStream.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.ShimTempStream.WriteByteArrayInt32Int32">
            <summary>设置 TempStream.Write(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.StubAesStream">
            <summary>LiteDB.Engine.AesStream 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.#ctor(System.String,System.IO.Stream)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.AttachBackingFieldToPosition">
            <summary>附加委托以将 StubAesStream.Position 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.AttachBackingFieldToReadTimeout">
            <summary>附加委托以将 StubAesStream.ReadTimeout 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.AttachBackingFieldToWriteTimeout">
            <summary>附加委托以将 StubAesStream.WriteTimeout 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>设置 Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>设置 Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.CanRead">
            <summary>设置 AesStream.get_CanRead() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.CanReadGet">
            <summary>设置 AesStream.get_CanRead() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.CanSeek">
            <summary>设置 AesStream.get_CanSeek() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.CanSeekGet">
            <summary>设置 AesStream.get_CanSeek() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.CanTimeout">
            <summary>设置 Stream.get_CanTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.CanTimeoutGet">
            <summary>设置 Stream.get_CanTimeout() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.CanWrite">
            <summary>设置 AesStream.get_CanWrite() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.CanWriteGet">
            <summary>设置 AesStream.get_CanWrite() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.Close">
            <summary>设置 Stream.Close() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.Close01">
            <summary>设置 Stream.Close() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.CreateWaitHandle">
            <summary>设置 Stream.CreateWaitHandle() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.CreateWaitHandle01">
            <summary>设置 Stream.CreateWaitHandle() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.Dispose(System.Boolean)">
            <summary>设置 AesStream.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.DisposeBoolean">
            <summary>设置 AesStream.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.EndRead(System.IAsyncResult)">
            <summary>设置 Stream.EndRead(IAsyncResult asyncResult) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.EndReadIAsyncResult">
            <summary>设置 Stream.EndRead(IAsyncResult asyncResult) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.EndWrite(System.IAsyncResult)">
            <summary>设置 Stream.EndWrite(IAsyncResult asyncResult) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.EndWriteIAsyncResult">
            <summary>设置 Stream.EndWrite(IAsyncResult asyncResult) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.Flush">
            <summary>设置 AesStream.Flush() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.Flush01">
            <summary>设置 AesStream.Flush() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.InitializeStub">
            <summary>初始化 type StubAesStream 的新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.Length">
            <summary>设置 AesStream.get_Length() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.LengthGet">
            <summary>设置 AesStream.get_Length() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.ObjectInvariant">
            <summary>设置 Stream.ObjectInvariant() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.ObjectInvariant01">
            <summary>设置 Stream.ObjectInvariant() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.Position">
            <summary>设置 AesStream.get_Position() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.PositionGet">
            <summary>设置 AesStream.get_Position() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.PositionSetInt64">
            <summary>设置 AesStream.set_Position(Int64 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AesStream.Read(Byte[] array, Int32 offset, Int32 count) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.ReadByte">
            <summary>设置 Stream.ReadByte() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.ReadByte01">
            <summary>设置 Stream.ReadByte() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.ReadByteArrayInt32Int32">
            <summary>设置 AesStream.Read(Byte[] array, Int32 offset, Int32 count) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.ReadTimeout">
            <summary>设置 Stream.get_ReadTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.ReadTimeoutGet">
            <summary>设置 Stream.get_ReadTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.ReadTimeoutSetInt32">
            <summary>设置 Stream.set_ReadTimeout(Int32 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>设置 AesStream.Seek(Int64 offset, SeekOrigin origin) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.SeekInt64SeekOrigin">
            <summary>设置 AesStream.Seek(Int64 offset, SeekOrigin origin) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.SetLength(System.Int64)">
            <summary>设置 AesStream.SetLength(Int64 value) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.SetLengthInt64">
            <summary>设置 AesStream.SetLength(Int64 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AesStream.Write(Byte[] array, Int32 offset, Int32 count) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubAesStream.WriteByte(System.Byte)">
            <summary>设置 Stream.WriteByte(Byte value) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.WriteByteArrayInt32Int32">
            <summary>设置 AesStream.Write(Byte[] array, Int32 offset, Int32 count) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.WriteByteByte">
            <summary>设置 Stream.WriteByte(Byte value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubAesStream.WriteTimeout">
            <summary>设置 Stream.get_WriteTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.WriteTimeoutGet">
            <summary>设置 Stream.get_WriteTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubAesStream.WriteTimeoutSetInt32">
            <summary>设置 Stream.set_WriteTimeout(Int32 value) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.StubEngineSettings">
            <summary>LiteDB.Engine.EngineSettings 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubEngineSettings.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubEngineSettings.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubEngineSettings.InitializeStub">
            <summary>初始化 type StubEngineSettings 的新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubEngineSettings.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubEngineSettings.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.StubILiteEngine">
            <summary>LiteDB.Engine.ILiteEngine 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.#ctor">
            <summary>初始化 type StubILiteEngine 的新实例</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.BeginTrans">
            <summary>设置 ILiteEngine.BeginTrans() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.Checkpoint">
            <summary>设置 ILiteEngine.Checkpoint() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.Commit">
            <summary>设置 ILiteEngine.Commit() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.DeleteManyStringBsonExpression">
            <summary>设置 ILiteEngine.DeleteMany(String collection, BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.DeleteStringIEnumerableOfBsonValue">
            <summary>设置 ILiteEngine.Delete(String collection, IEnumerable`1&lt;BsonValue&gt; ids) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.DropCollectionString">
            <summary>设置 ILiteEngine.DropCollection(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.DropIndexStringString">
            <summary>设置 ILiteEngine.DropIndex(String collection, String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.EnsureIndexStringStringBsonExpressionBoolean">
            <summary>设置 ILiteEngine.EnsureIndex(String collection, String name, BsonExpression expression, Boolean unique) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.InsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 ILiteEngine.Insert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#BeginTrans">
            <summary>设置 ILiteEngine.BeginTrans() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Checkpoint">
            <summary>设置 ILiteEngine.Checkpoint() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Commit">
            <summary>设置 ILiteEngine.Commit() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Delete(System.String,System.Collections.Generic.IEnumerable{LiteDB.BsonValue})">
            <summary>设置 ILiteEngine.Delete(String collection, IEnumerable`1&lt;BsonValue&gt; ids) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#DeleteMany(System.String,LiteDB.BsonExpression)">
            <summary>设置 ILiteEngine.DeleteMany(String collection, BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#DropCollection(System.String)">
            <summary>设置 ILiteEngine.DropCollection(String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#DropIndex(System.String,System.String)">
            <summary>设置 ILiteEngine.DropIndex(String collection, String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#EnsureIndex(System.String,System.String,LiteDB.BsonExpression,System.Boolean)">
            <summary>设置 ILiteEngine.EnsureIndex(String collection, String name, BsonExpression expression, Boolean unique) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Insert(System.String,System.Collections.Generic.IEnumerable{LiteDB.BsonDocument},LiteDB.BsonAutoId)">
            <summary>设置 ILiteEngine.Insert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Pragma(System.String)">
            <summary>设置 ILiteEngine.Pragma(String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Pragma(System.String,LiteDB.BsonValue)">
            <summary>设置 ILiteEngine.Pragma(String name, BsonValue value) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Query(System.String,LiteDB.Query)">
            <summary>设置 ILiteEngine.Query(String collection, Query query) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Rebuild(LiteDB.Engine.RebuildOptions)">
            <summary>设置 ILiteEngine.Rebuild(RebuildOptions options) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#RenameCollection(System.String,System.String)">
            <summary>设置 ILiteEngine.RenameCollection(String name, String newName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Rollback">
            <summary>设置 ILiteEngine.Rollback() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Update(System.String,System.Collections.Generic.IEnumerable{LiteDB.BsonDocument})">
            <summary>设置 ILiteEngine.Update(String collection, IEnumerable`1&lt;BsonDocument&gt; docs) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#UpdateMany(System.String,LiteDB.BsonExpression,LiteDB.BsonExpression)">
            <summary>设置 ILiteEngine.UpdateMany(String collection, BsonExpression transform, BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.LiteDB#Engine#ILiteEngine#Upsert(System.String,System.Collections.Generic.IEnumerable{LiteDB.BsonDocument},LiteDB.BsonAutoId)">
            <summary>设置 ILiteEngine.Upsert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.PragmaString">
            <summary>设置 ILiteEngine.Pragma(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.PragmaStringBsonValue">
            <summary>设置 ILiteEngine.Pragma(String name, BsonValue value) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.QueryStringQuery">
            <summary>设置 ILiteEngine.Query(String collection, Query query) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.RebuildRebuildOptions">
            <summary>设置 ILiteEngine.Rebuild(RebuildOptions options) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.RenameCollectionStringString">
            <summary>设置 ILiteEngine.RenameCollection(String name, String newName) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.Rollback">
            <summary>设置 ILiteEngine.Rollback() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubILiteEngine.System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.UpdateManyStringBsonExpressionBsonExpression">
            <summary>设置 ILiteEngine.UpdateMany(String collection, BsonExpression transform, BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.UpdateStringIEnumerableOfBsonDocument">
            <summary>设置 ILiteEngine.Update(String collection, IEnumerable`1&lt;BsonDocument&gt; docs) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubILiteEngine.UpsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 ILiteEngine.Upsert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.StubLiteEngine">
            <summary>LiteDB.Engine.LiteEngine 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubLiteEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubLiteEngine.#ctor(LiteDB.Engine.EngineSettings)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubLiteEngine.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubLiteEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubLiteEngine.Dispose(System.Boolean)">
            <summary>设置 LiteEngine.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubLiteEngine.DisposeBoolean">
            <summary>设置 LiteEngine.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubLiteEngine.InitializeStub">
            <summary>初始化 type StubLiteEngine 的新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubLiteEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubLiteEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.StubRebuildOptions">
            <summary>LiteDB.Engine.RebuildOptions 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubRebuildOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubRebuildOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubRebuildOptions.InitializeStub">
            <summary>初始化 type StubRebuildOptions 的新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubRebuildOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubRebuildOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Engine.Fakes.StubTempStream">
            <summary>LiteDB.Engine.TempStream 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.#ctor(System.String,System.Int64)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.AttachBackingFieldToPosition">
            <summary>附加委托以将 StubTempStream.Position 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.AttachBackingFieldToReadTimeout">
            <summary>附加委托以将 StubTempStream.ReadTimeout 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.AttachBackingFieldToWriteTimeout">
            <summary>附加委托以将 StubTempStream.WriteTimeout 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>设置 Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>设置 Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.CanRead">
            <summary>设置 TempStream.get_CanRead() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.CanReadGet">
            <summary>设置 TempStream.get_CanRead() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.CanSeek">
            <summary>设置 TempStream.get_CanSeek() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.CanSeekGet">
            <summary>设置 TempStream.get_CanSeek() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.CanTimeout">
            <summary>设置 Stream.get_CanTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.CanTimeoutGet">
            <summary>设置 Stream.get_CanTimeout() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.CanWrite">
            <summary>设置 TempStream.get_CanWrite() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.CanWriteGet">
            <summary>设置 TempStream.get_CanWrite() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.Close">
            <summary>设置 Stream.Close() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.Close01">
            <summary>设置 Stream.Close() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.CreateWaitHandle">
            <summary>设置 Stream.CreateWaitHandle() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.CreateWaitHandle01">
            <summary>设置 Stream.CreateWaitHandle() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.Dispose(System.Boolean)">
            <summary>设置 TempStream.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.DisposeBoolean">
            <summary>设置 TempStream.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.EndRead(System.IAsyncResult)">
            <summary>设置 Stream.EndRead(IAsyncResult asyncResult) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.EndReadIAsyncResult">
            <summary>设置 Stream.EndRead(IAsyncResult asyncResult) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.EndWrite(System.IAsyncResult)">
            <summary>设置 Stream.EndWrite(IAsyncResult asyncResult) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.EndWriteIAsyncResult">
            <summary>设置 Stream.EndWrite(IAsyncResult asyncResult) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.Flush">
            <summary>设置 TempStream.Flush() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.Flush01">
            <summary>设置 TempStream.Flush() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.InitializeStub">
            <summary>初始化 type StubTempStream 的新实例</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.Length">
            <summary>设置 TempStream.get_Length() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.LengthGet">
            <summary>设置 TempStream.get_Length() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.ObjectInvariant">
            <summary>设置 Stream.ObjectInvariant() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.ObjectInvariant01">
            <summary>设置 Stream.ObjectInvariant() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.Position">
            <summary>设置 TempStream.get_Position() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.PositionGet">
            <summary>设置 TempStream.get_Position() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.PositionSetInt64">
            <summary>设置 TempStream.set_Position(Int64 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 TempStream.Read(Byte[] buffer, Int32 offset, Int32 count) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.ReadByte">
            <summary>设置 Stream.ReadByte() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.ReadByte01">
            <summary>设置 Stream.ReadByte() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.ReadByteArrayInt32Int32">
            <summary>设置 TempStream.Read(Byte[] buffer, Int32 offset, Int32 count) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.ReadTimeout">
            <summary>设置 Stream.get_ReadTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.ReadTimeoutGet">
            <summary>设置 Stream.get_ReadTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.ReadTimeoutSetInt32">
            <summary>设置 Stream.set_ReadTimeout(Int32 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>设置 TempStream.Seek(Int64 offset, SeekOrigin origin) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.SeekInt64SeekOrigin">
            <summary>设置 TempStream.Seek(Int64 offset, SeekOrigin origin) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.SetLength(System.Int64)">
            <summary>设置 TempStream.SetLength(Int64 value) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.SetLengthInt64">
            <summary>设置 TempStream.SetLength(Int64 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 TempStream.Write(Byte[] buffer, Int32 offset, Int32 count) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Engine.Fakes.StubTempStream.WriteByte(System.Byte)">
            <summary>设置 Stream.WriteByte(Byte value) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.WriteByteArrayInt32Int32">
            <summary>设置 TempStream.Write(Byte[] buffer, Int32 offset, Int32 count) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.WriteByteByte">
            <summary>设置 Stream.WriteByte(Byte value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Engine.Fakes.StubTempStream.WriteTimeout">
            <summary>设置 Stream.get_WriteTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.WriteTimeoutGet">
            <summary>设置 Stream.get_WriteTimeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Engine.Fakes.StubTempStream.WriteTimeoutSetInt32">
            <summary>设置 Stream.set_WriteTimeout(Int32 value) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonArray">
            <summary>LiteDB.BsonArray 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.#ctor(LiteDB.BsonArray)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AddBsonValue">
            <summary>设置 BsonArray.Add(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AddRangeIEnumerableOfBsonValue">
            <summary>设置 BsonArray.AddRange(IEnumerable`1&lt;BsonValue&gt; items) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.AddRangeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 BsonArray.AddRange(!!0 collection) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonArray.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.AddBsonValue">
            <summary>设置 BsonArray.Add(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.AddRangeIEnumerableOfBsonValue">
            <summary>设置 BsonArray.AddRange(IEnumerable`1&lt;BsonValue&gt; items) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.AllInstances.AddRangeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{LiteDB.BsonArray,``0})">
            <summary>设置 BsonArray.AddRange(!!0 collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.Clear">
            <summary>设置 BsonArray.Clear() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.CompareToBsonValue">
            <summary>设置 BsonArray.CompareTo(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.ContainsBsonValue">
            <summary>设置 BsonArray.Contains(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.CopyToBsonValueArrayInt32">
            <summary>设置 BsonArray.CopyTo(BsonValue[] array, Int32 arrayIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.CountGet">
            <summary>设置 BsonArray.get_Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.GetBytesCountBoolean">
            <summary>设置 BsonArray.GetBytesCount(Boolean recalc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.GetEnumerator">
            <summary>设置 BsonArray.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.IndexOfBsonValue">
            <summary>设置 BsonArray.IndexOf(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.InsertInt32BsonValue">
            <summary>设置 BsonArray.Insert(Int32 index, BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.IsReadOnlyGet">
            <summary>设置 BsonArray.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.ItemGetInt32">
            <summary>设置 BsonArray.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.ItemSetInt32BsonValue">
            <summary>设置 BsonArray.set_Item(Int32 index, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.RawValueGet">
            <summary>设置 BsonArray.get_RawValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.RemoveAtInt32">
            <summary>设置 BsonArray.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.RemoveBsonValue">
            <summary>设置 BsonArray.Remove(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 BsonArray.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.Bind(System.IComparable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.Bind(System.IEquatable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.Bind(System.Collections.Generic.ICollection{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.Bind(System.Collections.Generic.IEnumerable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonArray.Bind(System.Collections.Generic.IList{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.Clear">
            <summary>设置 BsonArray.Clear() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.CompareToBsonValue">
            <summary>设置 BsonArray.CompareTo(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.Constructor">
            <summary>设置 BsonArray.BsonArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.ConstructorBsonValueArray">
            <summary>设置 BsonArray.BsonArray(BsonValue[] array) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.ConstructorIEnumerableOfBsonValue">
            <summary>设置 BsonArray.BsonArray(IEnumerable`1&lt;BsonValue&gt; items) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.ConstructorListOfBsonValue">
            <summary>设置 BsonArray.BsonArray(List`1&lt;BsonValue&gt; array) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.ContainsBsonValue">
            <summary>设置 BsonArray.Contains(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.CopyToBsonValueArrayInt32">
            <summary>设置 BsonArray.CopyTo(BsonValue[] array, Int32 arrayIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.CountGet">
            <summary>设置 BsonArray.get_Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.GetBytesCountBoolean">
            <summary>设置 BsonArray.GetBytesCount(Boolean recalc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.GetEnumerator">
            <summary>设置 BsonArray.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.IndexOfBsonValue">
            <summary>设置 BsonArray.IndexOf(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.InsertInt32BsonValue">
            <summary>设置 BsonArray.Insert(Int32 index, BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.IsReadOnlyGet">
            <summary>设置 BsonArray.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.ItemGetInt32">
            <summary>设置 BsonArray.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.ItemSetInt32BsonValue">
            <summary>设置 BsonArray.set_Item(Int32 index, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.RawValueGet">
            <summary>设置 BsonArray.get_RawValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.RemoveAtInt32">
            <summary>设置 BsonArray.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.RemoveBsonValue">
            <summary>设置 BsonArray.Remove(BsonValue item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonArray.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 BsonArray.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonCtorAttribute">
            <summary>LiteDB.BsonCtorAttribute 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonCtorAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonCtorAttribute.#ctor(LiteDB.BsonCtorAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonCtorAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonCtorAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonCtorAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonCtorAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonCtorAttribute.Constructor">
            <summary>设置 BsonCtorAttribute.BsonCtorAttribute() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonDataReader">
            <summary>LiteDB.BsonDataReader 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReader.#ctor(LiteDB.BsonDataReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonDataReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.CollectionGet">
            <summary>设置 BsonDataReader.get_Collection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.CurrentGet">
            <summary>设置 BsonDataReader.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.Dispose">
            <summary>设置 BsonDataReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.DisposeBoolean">
            <summary>设置 BsonDataReader.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.HasValuesGet">
            <summary>设置 BsonDataReader.get_HasValues() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.ItemGetString">
            <summary>设置 BsonDataReader.get_Item(String field) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.AllInstances.Read">
            <summary>设置 BsonDataReader.Read() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReader.Bind(LiteDB.IBsonDataReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReader.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.CollectionGet">
            <summary>设置 BsonDataReader.get_Collection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.Constructor">
            <summary>设置 BsonDataReader.BsonDataReader() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.ConstructorBsonValueString">
            <summary>设置 BsonDataReader.BsonDataReader(BsonValue value, String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.ConstructorIEnumerableOfBsonValueString">
            <summary>设置 BsonDataReader.BsonDataReader(IEnumerable`1&lt;BsonValue&gt; values, String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.CurrentGet">
            <summary>设置 BsonDataReader.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.Dispose">
            <summary>设置 BsonDataReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.DisposeBoolean">
            <summary>设置 BsonDataReader.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.HasValuesGet">
            <summary>设置 BsonDataReader.get_HasValues() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.ItemGetString">
            <summary>设置 BsonDataReader.get_Item(String field) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReader.Read">
            <summary>设置 BsonDataReader.Read() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonDataReaderExtensions">
            <summary>LiteDB.BsonDataReaderExtensions 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReaderExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReaderExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDataReaderExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.FirstIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.First(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.FirstOrDefaultIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.FirstOrDefault(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.SingleIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.Single(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.SingleOrDefaultIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.SingleOrDefault(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.ToArrayIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.ToArray(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.ToEnumerableIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.ToEnumerable(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDataReaderExtensions.ToListIBsonDataReader">
            <summary>设置 BsonDataReaderExtensions.ToList(IBsonDataReader reader) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonDocument">
            <summary>LiteDB.BsonDocument 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.#ctor(LiteDB.BsonDocument)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AddKeyValuePairOfStringBsonValue">
            <summary>设置 BsonDocument.Add(KeyValuePair`2&lt;String,BsonValue&gt; item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AddStringBsonValue">
            <summary>设置 BsonDocument.Add(String key, BsonValue value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonDocument.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.AddKeyValuePairOfStringBsonValue">
            <summary>设置 BsonDocument.Add(KeyValuePair`2&lt;String,BsonValue&gt; item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.AddStringBsonValue">
            <summary>设置 BsonDocument.Add(String key, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.Clear">
            <summary>设置 BsonDocument.Clear() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.CompareToBsonValue">
            <summary>设置 BsonDocument.CompareTo(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.ContainsKeyString">
            <summary>设置 BsonDocument.ContainsKey(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.ContainsKeyValuePairOfStringBsonValue">
            <summary>设置 BsonDocument.Contains(KeyValuePair`2&lt;String,BsonValue&gt; item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.CopyToBsonDocument">
            <summary>设置 BsonDocument.CopyTo(BsonDocument other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.CopyToKeyValuePairOfStringBsonValueArrayInt32">
            <summary>设置 BsonDocument.CopyTo(KeyValuePair`2&lt;String,BsonValue&gt;[] array, Int32 arrayIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.CountGet">
            <summary>设置 BsonDocument.get_Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.GetBytesCountBoolean">
            <summary>设置 BsonDocument.GetBytesCount(Boolean recalc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.GetElements">
            <summary>设置 BsonDocument.GetElements() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.GetEnumerator">
            <summary>设置 BsonDocument.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.IsReadOnlyGet">
            <summary>设置 BsonDocument.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.ItemGetString">
            <summary>设置 BsonDocument.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.ItemSetStringBsonValue">
            <summary>设置 BsonDocument.set_Item(String key, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.KeysGet">
            <summary>设置 BsonDocument.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.RawValueGet">
            <summary>设置 BsonDocument.get_RawValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.RemoveKeyValuePairOfStringBsonValue">
            <summary>设置 BsonDocument.Remove(KeyValuePair`2&lt;String,BsonValue&gt; item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.RemoveString">
            <summary>设置 BsonDocument.Remove(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 BsonDocument.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.TryGetValueStringBsonValueOut">
            <summary>设置 BsonDocument.TryGetValue(String key, BsonValue&amp; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.AllInstances.ValuesGet">
            <summary>设置 BsonDocument.get_Values() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.Bind(System.IComparable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.Bind(System.IEquatable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,LiteDB.BsonValue}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,LiteDB.BsonValue}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonDocument.Bind(System.Collections.Generic.IDictionary{System.String,LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.Clear">
            <summary>设置 BsonDocument.Clear() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.CompareToBsonValue">
            <summary>设置 BsonDocument.CompareTo(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.Constructor">
            <summary>设置 BsonDocument.BsonDocument() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ConstructorConcurrentDictionaryOfStringBsonValue">
            <summary>设置 BsonDocument.BsonDocument(ConcurrentDictionary`2&lt;String,BsonValue&gt; dict) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ConstructorIDictionaryOfStringBsonValue">
            <summary>设置 BsonDocument.BsonDocument(IDictionary`2&lt;String,BsonValue&gt; dict) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ContainsKeyString">
            <summary>设置 BsonDocument.ContainsKey(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ContainsKeyValuePairOfStringBsonValue">
            <summary>设置 BsonDocument.Contains(KeyValuePair`2&lt;String,BsonValue&gt; item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.CopyToBsonDocument">
            <summary>设置 BsonDocument.CopyTo(BsonDocument other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.CopyToKeyValuePairOfStringBsonValueArrayInt32">
            <summary>设置 BsonDocument.CopyTo(KeyValuePair`2&lt;String,BsonValue&gt;[] array, Int32 arrayIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.CountGet">
            <summary>设置 BsonDocument.get_Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.GetBytesCountBoolean">
            <summary>设置 BsonDocument.GetBytesCount(Boolean recalc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.GetElements">
            <summary>设置 BsonDocument.GetElements() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.GetEnumerator">
            <summary>设置 BsonDocument.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.IsReadOnlyGet">
            <summary>设置 BsonDocument.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ItemGetString">
            <summary>设置 BsonDocument.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ItemSetStringBsonValue">
            <summary>设置 BsonDocument.set_Item(String key, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.KeysGet">
            <summary>设置 BsonDocument.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.RawValueGet">
            <summary>设置 BsonDocument.get_RawValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.RemoveKeyValuePairOfStringBsonValue">
            <summary>设置 BsonDocument.Remove(KeyValuePair`2&lt;String,BsonValue&gt; item) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.RemoveString">
            <summary>设置 BsonDocument.Remove(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 BsonDocument.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.TryGetValueStringBsonValueOut">
            <summary>设置 BsonDocument.TryGetValue(String key, BsonValue&amp; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonDocument.ValuesGet">
            <summary>设置 BsonDocument.get_Values() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonExpression">
            <summary>LiteDB.BsonExpression 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonExpression.#ctor(LiteDB.BsonExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.DefaultFieldName">
            <summary>设置 BsonExpression.DefaultFieldName() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteBsonDocumentCollation">
            <summary>设置 BsonExpression.Execute(BsonDocument root, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteCollation">
            <summary>设置 BsonExpression.Execute(Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteIEnumerableOfBsonDocumentBsonDocumentBsonValueCollation">
            <summary>设置 BsonExpression.Execute(IEnumerable`1&lt;BsonDocument&gt; source, BsonDocument root, BsonValue current, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteIEnumerableOfBsonDocumentCollation">
            <summary>设置 BsonExpression.Execute(IEnumerable`1&lt;BsonDocument&gt; source, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteScalarBsonDocumentCollation">
            <summary>设置 BsonExpression.ExecuteScalar(BsonDocument root, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteScalarCollation">
            <summary>设置 BsonExpression.ExecuteScalar(Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteScalarIEnumerableOfBsonDocumentBsonDocumentBsonValueCollation">
            <summary>设置 BsonExpression.ExecuteScalar(IEnumerable`1&lt;BsonDocument&gt; source, BsonDocument root, BsonValue current, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExecuteScalarIEnumerableOfBsonDocumentCollation">
            <summary>设置 BsonExpression.ExecuteScalar(IEnumerable`1&lt;BsonDocument&gt; source, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExpressionGet">
            <summary>设置 BsonExpression.get_Expression() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ExpressionSetExpression">
            <summary>设置 BsonExpression.set_Expression(Expression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.FieldsGet">
            <summary>设置 BsonExpression.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.FieldsSetHashSetOfString">
            <summary>设置 BsonExpression.set_Fields(HashSet`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.GetIndexKeysBsonDocumentCollation">
            <summary>设置 BsonExpression.GetIndexKeys(BsonDocument doc, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsANYGet">
            <summary>设置 BsonExpression.get_IsANY() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsImmutableGet">
            <summary>设置 BsonExpression.get_IsImmutable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsImmutableSetBoolean">
            <summary>设置 BsonExpression.set_IsImmutable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsIndexableGet">
            <summary>设置 BsonExpression.get_IsIndexable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsPredicateGet">
            <summary>设置 BsonExpression.get_IsPredicate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsScalarGet">
            <summary>设置 BsonExpression.get_IsScalar() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsScalarSetBoolean">
            <summary>设置 BsonExpression.set_IsScalar(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.IsValueGet">
            <summary>设置 BsonExpression.get_IsValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.LeftGet">
            <summary>设置 BsonExpression.get_Left() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.LeftSetBsonExpression">
            <summary>设置 BsonExpression.set_Left(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ParametersGet">
            <summary>设置 BsonExpression.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ParametersSetBsonDocument">
            <summary>设置 BsonExpression.set_Parameters(BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.RightGet">
            <summary>设置 BsonExpression.get_Right() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.RightSetBsonExpression">
            <summary>设置 BsonExpression.set_Right(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.SourceGet">
            <summary>设置 BsonExpression.get_Source() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.SourceSetString">
            <summary>设置 BsonExpression.set_Source(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.ToString01">
            <summary>设置 BsonExpression.ToString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.TypeGet">
            <summary>设置 BsonExpression.get_Type() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.TypeSetBsonExpressionType">
            <summary>设置 BsonExpression.set_Type(BsonExpressionType value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.UseSourceGet">
            <summary>设置 BsonExpression.get_UseSource() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.AllInstances.UseSourceSetBoolean">
            <summary>设置 BsonExpression.set_UseSource(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.Constructor">
            <summary>设置 BsonExpression.BsonExpression() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.CreateString">
            <summary>设置 BsonExpression.Create(String expression) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.CreateStringBsonDocument">
            <summary>设置 BsonExpression.Create(String expression, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.CreateStringBsonValueArray">
            <summary>设置 BsonExpression.Create(String expression, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.DefaultFieldName">
            <summary>设置 BsonExpression.DefaultFieldName() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteBsonDocumentCollation">
            <summary>设置 BsonExpression.Execute(BsonDocument root, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteCollation">
            <summary>设置 BsonExpression.Execute(Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteIEnumerableOfBsonDocumentBsonDocumentBsonValueCollation">
            <summary>设置 BsonExpression.Execute(IEnumerable`1&lt;BsonDocument&gt; source, BsonDocument root, BsonValue current, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteIEnumerableOfBsonDocumentCollation">
            <summary>设置 BsonExpression.Execute(IEnumerable`1&lt;BsonDocument&gt; source, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteScalarBsonDocumentCollation">
            <summary>设置 BsonExpression.ExecuteScalar(BsonDocument root, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteScalarCollation">
            <summary>设置 BsonExpression.ExecuteScalar(Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteScalarIEnumerableOfBsonDocumentBsonDocumentBsonValueCollation">
            <summary>设置 BsonExpression.ExecuteScalar(IEnumerable`1&lt;BsonDocument&gt; source, BsonDocument root, BsonValue current, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExecuteScalarIEnumerableOfBsonDocumentCollation">
            <summary>设置 BsonExpression.ExecuteScalar(IEnumerable`1&lt;BsonDocument&gt; source, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExpressionGet">
            <summary>设置 BsonExpression.get_Expression() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ExpressionSetExpression">
            <summary>设置 BsonExpression.set_Expression(Expression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.FieldsGet">
            <summary>设置 BsonExpression.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.FieldsSetHashSetOfString">
            <summary>设置 BsonExpression.set_Fields(HashSet`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.FunctionsGet">
            <summary>设置 BsonExpression.get_Functions() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.GetFunctionStringInt32">
            <summary>设置 BsonExpression.GetFunction(String name, Int32 parameterCount) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.GetIndexKeysBsonDocumentCollation">
            <summary>设置 BsonExpression.GetIndexKeys(BsonDocument doc, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.GetMethodStringInt32">
            <summary>设置 BsonExpression.GetMethod(String name, Int32 parameterCount) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ImplicitOpBsonExpressionString">
            <summary>设置 BsonExpression.op_Implicit(BsonExpression expr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ImplicitOpStringBsonExpression">
            <summary>设置 BsonExpression.op_Implicit(String expr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsANYGet">
            <summary>设置 BsonExpression.get_IsANY() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsImmutableGet">
            <summary>设置 BsonExpression.get_IsImmutable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsImmutableSetBoolean">
            <summary>设置 BsonExpression.set_IsImmutable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsIndexableGet">
            <summary>设置 BsonExpression.get_IsIndexable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsPredicateGet">
            <summary>设置 BsonExpression.get_IsPredicate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsScalarGet">
            <summary>设置 BsonExpression.get_IsScalar() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsScalarSetBoolean">
            <summary>设置 BsonExpression.set_IsScalar(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.IsValueGet">
            <summary>设置 BsonExpression.get_IsValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.LeftGet">
            <summary>设置 BsonExpression.get_Left() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.LeftSetBsonExpression">
            <summary>设置 BsonExpression.set_Left(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.MethodsGet">
            <summary>设置 BsonExpression.get_Methods() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ParametersGet">
            <summary>设置 BsonExpression.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ParametersSetBsonDocument">
            <summary>设置 BsonExpression.set_Parameters(BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.RightGet">
            <summary>设置 BsonExpression.get_Right() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.RightSetBsonExpression">
            <summary>设置 BsonExpression.set_Right(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.SetParametersBsonExpressionBsonDocument">
            <summary>设置 BsonExpression.SetParameters(BsonExpression expr, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.SourceGet">
            <summary>设置 BsonExpression.get_Source() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.SourceSetString">
            <summary>设置 BsonExpression.set_Source(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.StaticConstructor">
            <summary>设置 BsonExpression.BsonExpression() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.ToString">
            <summary>设置 BsonExpression.ToString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.TypeGet">
            <summary>设置 BsonExpression.get_Type() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.TypeSetBsonExpressionType">
            <summary>设置 BsonExpression.set_Type(BsonExpressionType value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.UseSourceGet">
            <summary>设置 BsonExpression.get_UseSource() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonExpression.UseSourceSetBoolean">
            <summary>设置 BsonExpression.set_UseSource(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonFieldAttribute">
            <summary>LiteDB.BsonFieldAttribute 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonFieldAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonFieldAttribute.#ctor(LiteDB.BsonFieldAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonFieldAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.AllInstances.NameGet">
            <summary>设置 BsonFieldAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.AllInstances.NameSetString">
            <summary>设置 BsonFieldAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonFieldAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonFieldAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.Constructor">
            <summary>设置 BsonFieldAttribute.BsonFieldAttribute() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.ConstructorString">
            <summary>设置 BsonFieldAttribute.BsonFieldAttribute(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.NameGet">
            <summary>设置 BsonFieldAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonFieldAttribute.NameSetString">
            <summary>设置 BsonFieldAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonIdAttribute">
            <summary>LiteDB.BsonIdAttribute 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIdAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIdAttribute.#ctor(LiteDB.BsonIdAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonIdAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.AllInstances.AutoIdGet">
            <summary>设置 BsonIdAttribute.get_AutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.AllInstances.AutoIdSetBoolean">
            <summary>设置 BsonIdAttribute.set_AutoId(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.AutoIdGet">
            <summary>设置 BsonIdAttribute.get_AutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.AutoIdSetBoolean">
            <summary>设置 BsonIdAttribute.set_AutoId(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIdAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIdAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.Constructor">
            <summary>设置 BsonIdAttribute.BsonIdAttribute() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIdAttribute.ConstructorBoolean">
            <summary>设置 BsonIdAttribute.BsonIdAttribute(Boolean autoId) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonIgnoreAttribute">
            <summary>LiteDB.BsonIgnoreAttribute 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIgnoreAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIgnoreAttribute.#ctor(LiteDB.BsonIgnoreAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonIgnoreAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIgnoreAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonIgnoreAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIgnoreAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonIgnoreAttribute.Constructor">
            <summary>设置 BsonIgnoreAttribute.BsonIgnoreAttribute() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonMapper">
            <summary>LiteDB.BsonMapper 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.#ctor(LiteDB.BsonMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.BuildEntityMapperType">
            <summary>设置 BsonMapper.BuildEntityMapper(Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeAnonymousTypeTypeBsonDocument">
            <summary>设置 BsonMapper.DeserializeAnonymousType(Type type, BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeArrayTypeBsonArray">
            <summary>设置 BsonMapper.DeserializeArray(Type type, BsonArray array) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeDictionaryTypeTypeIDictionaryBsonDocument">
            <summary>设置 BsonMapper.DeserializeDictionary(Type K, Type T, IDictionary dict, BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeListTypeBsonArray">
            <summary>设置 BsonMapper.DeserializeList(Type type, BsonArray value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeObjectEntityMapperObjectBsonDocument">
            <summary>设置 BsonMapper.DeserializeObject(EntityMapper entity, Object obj, BsonDocument value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeOf1BsonValue``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,LiteDB.BsonValue,``0})">
            <summary>设置 BsonMapper.Deserialize(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.DeserializeTypeBsonValue">
            <summary>设置 BsonMapper.Deserialize(Type type, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.EmptyStringToNullGet">
            <summary>设置 BsonMapper.get_EmptyStringToNull() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.EmptyStringToNullSetBoolean">
            <summary>设置 BsonMapper.set_EmptyStringToNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.EntityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,LiteDB.EntityBuilder{``0}})">
            <summary>设置 BsonMapper.Entity() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.EnumAsIntegerGet">
            <summary>设置 BsonMapper.get_EnumAsInteger() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.EnumAsIntegerSetBoolean">
            <summary>设置 BsonMapper.set_EnumAsInteger(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.GetEntityMapperType">
            <summary>设置 BsonMapper.GetEntityMapper(Type type) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.GetExpressionOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,System.Linq.Expressions.Expression{System.Func{``0,``1}},LiteDB.BsonExpression})">
            <summary>设置 BsonMapper.GetExpression(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.GetIdMemberIEnumerableOfMemberInfo">
            <summary>设置 BsonMapper.GetIdMember(IEnumerable`1&lt;MemberInfo&gt; members) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.GetIndexExpressionOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,System.Linq.Expressions.Expression{System.Func{``0,``1}},LiteDB.BsonExpression})">
            <summary>设置 BsonMapper.GetIndexExpression(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.GetTypeCtorEntityMapper">
            <summary>设置 BsonMapper.GetTypeCtor(EntityMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.GetTypeMembersType">
            <summary>设置 BsonMapper.GetTypeMembers(Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.IncludeFieldsGet">
            <summary>设置 BsonMapper.get_IncludeFields() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.IncludeFieldsSetBoolean">
            <summary>设置 BsonMapper.set_IncludeFields(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.IncludeNonPublicGet">
            <summary>设置 BsonMapper.get_IncludeNonPublic() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.IncludeNonPublicSetBoolean">
            <summary>设置 BsonMapper.set_IncludeNonPublic(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.MaxDepthGet">
            <summary>设置 BsonMapper.get_MaxDepth() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.MaxDepthSetInt32">
            <summary>设置 BsonMapper.set_MaxDepth(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.RegisterTypeOf1FuncOfM0BsonValueFuncOfBsonValueM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{LiteDB.BsonMapper,System.Func{``0,LiteDB.BsonValue},System.Func{LiteDB.BsonValue,``0}})">
            <summary>设置 BsonMapper.RegisterType(Func`2&lt;!!0,BsonValue&gt; serialize, Func`2&lt;BsonValue,!!0&gt; deserialize) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.RegisterTypeTypeFuncOfObjectBsonValueFuncOfBsonValueObject">
            <summary>设置 BsonMapper.RegisterType(Type type, Func`2&lt;Object,BsonValue&gt; serialize, Func`2&lt;BsonValue,Object&gt; deserialize) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeArrayTypeIEnumerableInt32">
            <summary>设置 BsonMapper.SerializeArray(Type type, IEnumerable array, Int32 depth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeDictionaryTypeIDictionaryInt32">
            <summary>设置 BsonMapper.SerializeDictionary(Type type, IDictionary dict, Int32 depth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeNullValuesGet">
            <summary>设置 BsonMapper.get_SerializeNullValues() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeNullValuesSetBoolean">
            <summary>设置 BsonMapper.set_SerializeNullValues(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeObjectTypeObjectInt32">
            <summary>设置 BsonMapper.SerializeObject(Type type, Object obj, Int32 depth) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,``0,LiteDB.BsonValue})">
            <summary>设置 BsonMapper.Serialize(!!0 obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeTypeObject">
            <summary>设置 BsonMapper.Serialize(Type type, Object obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.SerializeTypeObjectInt32">
            <summary>设置 BsonMapper.Serialize(Type type, Object obj, Int32 depth) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.ToDocumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,``0,LiteDB.BsonDocument})">
            <summary>设置 BsonMapper.ToDocument(!!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.ToDocumentTypeObject">
            <summary>设置 BsonMapper.ToDocument(Type type, Object entity) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.AllInstances.ToObjectOf1BsonDocument``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonMapper,LiteDB.BsonDocument,``0})">
            <summary>设置 BsonMapper.ToObject(BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.ToObjectTypeBsonDocument">
            <summary>设置 BsonMapper.ToObject(Type type, BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.TrimWhitespaceGet">
            <summary>设置 BsonMapper.get_TrimWhitespace() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.TrimWhitespaceSetBoolean">
            <summary>设置 BsonMapper.set_TrimWhitespace(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.UseCamelCase">
            <summary>设置 BsonMapper.UseCamelCase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances.UseLowerCaseDelimiterChar">
            <summary>设置 BsonMapper.UseLowerCaseDelimiter(Char delimiter) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances._GetTypeCtorb__50_0ConstructorInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_0(ConstructorInfo x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances._GetTypeCtorb__50_2ConstructorInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_2(ConstructorInfo x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances._GetTypeCtorb__50_3ParameterInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_3(ParameterInfo p) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.AllInstances._GetTypeCtorb__50_4ParameterInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_4(ParameterInfo p) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.BuildEntityMapperType">
            <summary>设置 BsonMapper.BuildEntityMapper(Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.ConstructorFuncOfTypeObjectITypeNameBinder">
            <summary>设置 BsonMapper.BsonMapper(Func`2&lt;Type,Object&gt; customTypeInstantiator, ITypeNameBinder typeNameBinder) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.DeserializeAnonymousTypeTypeBsonDocument">
            <summary>设置 BsonMapper.DeserializeAnonymousType(Type type, BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.DeserializeArrayTypeBsonArray">
            <summary>设置 BsonMapper.DeserializeArray(Type type, BsonArray array) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.DeserializeDictionaryTypeTypeIDictionaryBsonDocument">
            <summary>设置 BsonMapper.DeserializeDictionary(Type K, Type T, IDictionary dict, BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.DeserializeListTypeBsonArray">
            <summary>设置 BsonMapper.DeserializeList(Type type, BsonArray value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.DeserializeObjectEntityMapperObjectBsonDocument">
            <summary>设置 BsonMapper.DeserializeObject(EntityMapper entity, Object obj, BsonDocument value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.DeserializeOf1BsonValue``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonValue,``0})">
            <summary>设置 BsonMapper.Deserialize(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.DeserializeTypeBsonValue">
            <summary>设置 BsonMapper.Deserialize(Type type, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.EmptyStringToNullGet">
            <summary>设置 BsonMapper.get_EmptyStringToNull() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.EmptyStringToNullSetBoolean">
            <summary>设置 BsonMapper.set_EmptyStringToNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.EntityOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.EntityBuilder{``0}})">
            <summary>设置 BsonMapper.Entity() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.EnumAsIntegerGet">
            <summary>设置 BsonMapper.get_EnumAsInteger() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.EnumAsIntegerSetBoolean">
            <summary>设置 BsonMapper.set_EnumAsInteger(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.GetEntityMapperType">
            <summary>设置 BsonMapper.GetEntityMapper(Type type) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.GetExpressionOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},LiteDB.BsonExpression})">
            <summary>设置 BsonMapper.GetExpression(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.GetIdMemberIEnumerableOfMemberInfo">
            <summary>设置 BsonMapper.GetIdMember(IEnumerable`1&lt;MemberInfo&gt; members) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.GetIndexExpressionOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},LiteDB.BsonExpression})">
            <summary>设置 BsonMapper.GetIndexExpression(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.GetTypeCtorEntityMapper">
            <summary>设置 BsonMapper.GetTypeCtor(EntityMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.GetTypeMembersType">
            <summary>设置 BsonMapper.GetTypeMembers(Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.IncludeFieldsGet">
            <summary>设置 BsonMapper.get_IncludeFields() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.IncludeFieldsSetBoolean">
            <summary>设置 BsonMapper.set_IncludeFields(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.IncludeNonPublicGet">
            <summary>设置 BsonMapper.get_IncludeNonPublic() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.IncludeNonPublicSetBoolean">
            <summary>设置 BsonMapper.set_IncludeNonPublic(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.MaxDepthGet">
            <summary>设置 BsonMapper.get_MaxDepth() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.MaxDepthSetInt32">
            <summary>设置 BsonMapper.set_MaxDepth(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.RegisterDbRefBsonMapperMemberMapperITypeNameBinderString">
            <summary>设置 BsonMapper.RegisterDbRef(BsonMapper mapper, MemberMapper member, ITypeNameBinder typeNameBinder, String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.RegisterDbRefItemBsonMapperMemberMapperITypeNameBinderString">
            <summary>设置 BsonMapper.RegisterDbRefItem(BsonMapper mapper, MemberMapper member, ITypeNameBinder typeNameBinder, String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.RegisterDbRefListBsonMapperMemberMapperITypeNameBinderString">
            <summary>设置 BsonMapper.RegisterDbRefList(BsonMapper mapper, MemberMapper member, ITypeNameBinder typeNameBinder, String collection) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.RegisterTypeOf1FuncOfM0BsonValueFuncOfBsonValueM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Func{``0,LiteDB.BsonValue},System.Func{LiteDB.BsonValue,``0}})">
            <summary>设置 BsonMapper.RegisterType(Func`2&lt;!!0,BsonValue&gt; serialize, Func`2&lt;BsonValue,!!0&gt; deserialize) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.RegisterTypeTypeFuncOfObjectBsonValueFuncOfBsonValueObject">
            <summary>设置 BsonMapper.RegisterType(Type type, Func`2&lt;Object,BsonValue&gt; serialize, Func`2&lt;BsonValue,Object&gt; deserialize) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeArrayTypeIEnumerableInt32">
            <summary>设置 BsonMapper.SerializeArray(Type type, IEnumerable array, Int32 depth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeDictionaryTypeIDictionaryInt32">
            <summary>设置 BsonMapper.SerializeDictionary(Type type, IDictionary dict, Int32 depth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeNullValuesGet">
            <summary>设置 BsonMapper.get_SerializeNullValues() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeNullValuesSetBoolean">
            <summary>设置 BsonMapper.set_SerializeNullValues(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeObjectTypeObjectInt32">
            <summary>设置 BsonMapper.SerializeObject(Type type, Object obj, Int32 depth) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.SerializeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,LiteDB.BsonValue})">
            <summary>设置 BsonMapper.Serialize(!!0 obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeTypeObject">
            <summary>设置 BsonMapper.Serialize(Type type, Object obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.SerializeTypeObjectInt32">
            <summary>设置 BsonMapper.Serialize(Type type, Object obj, Int32 depth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.StaticConstructor">
            <summary>设置 BsonMapper.BsonMapper() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.ToDocumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,LiteDB.BsonDocument})">
            <summary>设置 BsonMapper.ToDocument(!!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.ToDocumentTypeObject">
            <summary>设置 BsonMapper.ToDocument(Type type, Object entity) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonMapper.ToObjectOf1BsonDocument``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonDocument,``0})">
            <summary>设置 BsonMapper.ToObject(BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.ToObjectTypeBsonDocument">
            <summary>设置 BsonMapper.ToObject(Type type, BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.TrimWhitespaceGet">
            <summary>设置 BsonMapper.get_TrimWhitespace() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.TrimWhitespaceSetBoolean">
            <summary>设置 BsonMapper.set_TrimWhitespace(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.UseCamelCase">
            <summary>设置 BsonMapper.UseCamelCase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper.UseLowerCaseDelimiterChar">
            <summary>设置 BsonMapper.UseLowerCaseDelimiter(Char delimiter) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper._GetTypeCtorb__50_0ConstructorInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_0(ConstructorInfo x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper._GetTypeCtorb__50_2ConstructorInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_2(ConstructorInfo x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper._GetTypeCtorb__50_3ParameterInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_3(ParameterInfo p) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonMapper._GetTypeCtorb__50_4ParameterInfo">
            <summary>设置 BsonMapper.&lt;GetTypeCtor&gt;b__50_4(ParameterInfo p) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonRefAttribute">
            <summary>LiteDB.BsonRefAttribute 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonRefAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonRefAttribute.#ctor(LiteDB.BsonRefAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonRefAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.AllInstances.CollectionGet">
            <summary>设置 BsonRefAttribute.get_Collection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.AllInstances.CollectionSetString">
            <summary>设置 BsonRefAttribute.set_Collection(String value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonRefAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonRefAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.CollectionGet">
            <summary>设置 BsonRefAttribute.get_Collection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.CollectionSetString">
            <summary>设置 BsonRefAttribute.set_Collection(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.Constructor">
            <summary>设置 BsonRefAttribute.BsonRefAttribute() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonRefAttribute.ConstructorString">
            <summary>设置 BsonRefAttribute.BsonRefAttribute(String collection) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonSerializer">
            <summary>LiteDB.BsonSerializer 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonSerializer.#ctor(LiteDB.BsonSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonSerializer.Constructor">
            <summary>设置 BsonSerializer.BsonSerializer() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonSerializer.DeserializeByteArrayBooleanHashSetOfString">
            <summary>设置 BsonSerializer.Deserialize(Byte[] buffer, Boolean utcDate, HashSet`1&lt;String&gt; fields) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonSerializer.SerializeBsonDocument">
            <summary>设置 BsonSerializer.Serialize(BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonValue">
            <summary>LiteDB.BsonValue 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonValue.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonValue.#ctor(LiteDB.BsonValue)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AdditionOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_Addition(BsonValue left, BsonValue right) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimBsonValue.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsArrayGet">
            <summary>设置 BsonValue.get_AsArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsBinaryGet">
            <summary>设置 BsonValue.get_AsBinary() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsBooleanGet">
            <summary>设置 BsonValue.get_AsBoolean() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsDateTimeGet">
            <summary>设置 BsonValue.get_AsDateTime() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsDecimalGet">
            <summary>设置 BsonValue.get_AsDecimal() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsDocumentGet">
            <summary>设置 BsonValue.get_AsDocument() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsDoubleGet">
            <summary>设置 BsonValue.get_AsDouble() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsGuidGet">
            <summary>设置 BsonValue.get_AsGuid() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsInt32Get">
            <summary>设置 BsonValue.get_AsInt32() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsInt64Get">
            <summary>设置 BsonValue.get_AsInt64() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsObjectIdGet">
            <summary>设置 BsonValue.get_AsObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.AsStringGet">
            <summary>设置 BsonValue.get_AsString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.CompareToBsonValue">
            <summary>设置 BsonValue.CompareTo(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.CompareToBsonValueCollation">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.EqualsBsonValue">
            <summary>设置 BsonValue.Equals(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.EqualsObject">
            <summary>设置 BsonValue.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.GetBytesCountBoolean">
            <summary>设置 BsonValue.GetBytesCount(Boolean recalc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.GetBytesCountElementStringBsonValue">
            <summary>设置 BsonValue.GetBytesCountElement(String key, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.GetHashCode01">
            <summary>设置 BsonValue.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsArrayGet">
            <summary>设置 BsonValue.get_IsArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsBinaryGet">
            <summary>设置 BsonValue.get_IsBinary() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsBooleanGet">
            <summary>设置 BsonValue.get_IsBoolean() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsDateTimeGet">
            <summary>设置 BsonValue.get_IsDateTime() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsDecimalGet">
            <summary>设置 BsonValue.get_IsDecimal() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsDocumentGet">
            <summary>设置 BsonValue.get_IsDocument() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsDoubleGet">
            <summary>设置 BsonValue.get_IsDouble() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsGuidGet">
            <summary>设置 BsonValue.get_IsGuid() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsInt32Get">
            <summary>设置 BsonValue.get_IsInt32() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsInt64Get">
            <summary>设置 BsonValue.get_IsInt64() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsMaxValueGet">
            <summary>设置 BsonValue.get_IsMaxValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsMinValueGet">
            <summary>设置 BsonValue.get_IsMinValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsNullGet">
            <summary>设置 BsonValue.get_IsNull() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsNumberGet">
            <summary>设置 BsonValue.get_IsNumber() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsObjectIdGet">
            <summary>设置 BsonValue.get_IsObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.IsStringGet">
            <summary>设置 BsonValue.get_IsString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.ItemGetInt32">
            <summary>设置 BsonValue.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.ItemGetString">
            <summary>设置 BsonValue.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.ItemSetInt32BsonValue">
            <summary>设置 BsonValue.set_Item(Int32 index, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.ItemSetStringBsonValue">
            <summary>设置 BsonValue.set_Item(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.RawValueGet">
            <summary>设置 BsonValue.get_RawValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.ToString01">
            <summary>设置 BsonValue.ToString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AllInstances.TypeGet">
            <summary>设置 BsonValue.get_Type() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsArrayGet">
            <summary>设置 BsonValue.get_AsArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsBinaryGet">
            <summary>设置 BsonValue.get_AsBinary() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsBooleanGet">
            <summary>设置 BsonValue.get_AsBoolean() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsDateTimeGet">
            <summary>设置 BsonValue.get_AsDateTime() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsDecimalGet">
            <summary>设置 BsonValue.get_AsDecimal() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsDocumentGet">
            <summary>设置 BsonValue.get_AsDocument() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsDoubleGet">
            <summary>设置 BsonValue.get_AsDouble() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsGuidGet">
            <summary>设置 BsonValue.get_AsGuid() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsInt32Get">
            <summary>设置 BsonValue.get_AsInt32() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsInt64Get">
            <summary>设置 BsonValue.get_AsInt64() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsObjectIdGet">
            <summary>设置 BsonValue.get_AsObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.AsStringGet">
            <summary>设置 BsonValue.get_AsString() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonValue.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonValue.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonValue.Bind(System.IComparable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimBsonValue.Bind(System.IEquatable{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.CompareToBsonValue">
            <summary>设置 BsonValue.CompareTo(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.CompareToBsonValueCollation">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.Constructor">
            <summary>设置 BsonValue.BsonValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorBoolean">
            <summary>设置 BsonValue.BsonValue(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorBsonTypeObject">
            <summary>设置 BsonValue.BsonValue(BsonType type, Object rawValue) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorByteArray">
            <summary>设置 BsonValue.BsonValue(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorDateTime">
            <summary>设置 BsonValue.BsonValue(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorDecimal">
            <summary>设置 BsonValue.BsonValue(Decimal value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorDouble">
            <summary>设置 BsonValue.BsonValue(Double value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorGuid">
            <summary>设置 BsonValue.BsonValue(Guid value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorInt32">
            <summary>设置 BsonValue.BsonValue(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorInt64">
            <summary>设置 BsonValue.BsonValue(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorObject">
            <summary>设置 BsonValue.BsonValue(Object value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorObjectId">
            <summary>设置 BsonValue.BsonValue(ObjectId value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ConstructorString">
            <summary>设置 BsonValue.BsonValue(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.DbRefBsonValueString">
            <summary>设置 BsonValue.DbRef(BsonValue id, String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.DivisionOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_Division(BsonValue left, BsonValue right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.EqualityOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_Equality(BsonValue lhs, BsonValue rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.EqualsBsonValue">
            <summary>设置 BsonValue.Equals(BsonValue other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.EqualsObject">
            <summary>设置 BsonValue.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.GetBytesCountBoolean">
            <summary>设置 BsonValue.GetBytesCount(Boolean recalc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.GetBytesCountElementStringBsonValue">
            <summary>设置 BsonValue.GetBytesCountElement(String key, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.GetHashCode">
            <summary>设置 BsonValue.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.GreaterThanOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_GreaterThan(BsonValue lhs, BsonValue rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.GreaterThanOrEqualOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_GreaterThanOrEqual(BsonValue lhs, BsonValue rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBooleanBsonValue">
            <summary>设置 BsonValue.op_Implicit(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueBoolean">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueByteArray">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueDateTime">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueDecimal">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueDouble">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueGuid">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueInt32">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueInt64">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueObjectId">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueString">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpBsonValueUInt64">
            <summary>设置 BsonValue.op_Implicit(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpByteArrayBsonValue">
            <summary>设置 BsonValue.op_Implicit(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpDateTimeBsonValue">
            <summary>设置 BsonValue.op_Implicit(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpDecimalBsonValue">
            <summary>设置 BsonValue.op_Implicit(Decimal value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpDoubleBsonValue">
            <summary>设置 BsonValue.op_Implicit(Double value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpGuidBsonValue">
            <summary>设置 BsonValue.op_Implicit(Guid value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpInt32BsonValue">
            <summary>设置 BsonValue.op_Implicit(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpInt64BsonValue">
            <summary>设置 BsonValue.op_Implicit(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpObjectIdBsonValue">
            <summary>设置 BsonValue.op_Implicit(ObjectId value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpStringBsonValue">
            <summary>设置 BsonValue.op_Implicit(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ImplicitOpUInt64BsonValue">
            <summary>设置 BsonValue.op_Implicit(UInt64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.InequalityOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_Inequality(BsonValue lhs, BsonValue rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsArrayGet">
            <summary>设置 BsonValue.get_IsArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsBinaryGet">
            <summary>设置 BsonValue.get_IsBinary() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsBooleanGet">
            <summary>设置 BsonValue.get_IsBoolean() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsDateTimeGet">
            <summary>设置 BsonValue.get_IsDateTime() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsDecimalGet">
            <summary>设置 BsonValue.get_IsDecimal() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsDocumentGet">
            <summary>设置 BsonValue.get_IsDocument() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsDoubleGet">
            <summary>设置 BsonValue.get_IsDouble() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsGuidGet">
            <summary>设置 BsonValue.get_IsGuid() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsInt32Get">
            <summary>设置 BsonValue.get_IsInt32() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsInt64Get">
            <summary>设置 BsonValue.get_IsInt64() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsMaxValueGet">
            <summary>设置 BsonValue.get_IsMaxValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsMinValueGet">
            <summary>设置 BsonValue.get_IsMinValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsNullGet">
            <summary>设置 BsonValue.get_IsNull() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsNumberGet">
            <summary>设置 BsonValue.get_IsNumber() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsObjectIdGet">
            <summary>设置 BsonValue.get_IsObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.IsStringGet">
            <summary>设置 BsonValue.get_IsString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ItemGetInt32">
            <summary>设置 BsonValue.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ItemGetString">
            <summary>设置 BsonValue.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ItemSetInt32BsonValue">
            <summary>设置 BsonValue.set_Item(Int32 index, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ItemSetStringBsonValue">
            <summary>设置 BsonValue.set_Item(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.LessThanOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_LessThan(BsonValue lhs, BsonValue rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.LessThanOrEqualOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_LessThanOrEqual(BsonValue lhs, BsonValue rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.MultiplyOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_Multiply(BsonValue left, BsonValue right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.RawValueGet">
            <summary>设置 BsonValue.get_RawValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.StaticConstructor">
            <summary>设置 BsonValue.BsonValue() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.SubtractionOpBsonValueBsonValue">
            <summary>设置 BsonValue.op_Subtraction(BsonValue left, BsonValue right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.ToString">
            <summary>设置 BsonValue.ToString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimBsonValue.TypeGet">
            <summary>设置 BsonValue.get_Type() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimCollation">
            <summary>LiteDB.Collation 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.#ctor(LiteDB.Collation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimCollation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.CompareBsonValueBsonValue">
            <summary>设置 Collation.Compare(BsonValue left, BsonValue rigth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.CompareStringString">
            <summary>设置 Collation.Compare(String left, String right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.CultureGet">
            <summary>设置 Collation.get_Culture() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.EqualsBsonValueBsonValue">
            <summary>设置 Collation.Equals(BsonValue x, BsonValue y) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.GetHashCodeBsonValue">
            <summary>设置 Collation.GetHashCode(BsonValue obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.LCIDGet">
            <summary>设置 Collation.get_LCID() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.SortOptionsGet">
            <summary>设置 Collation.get_SortOptions() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.AllInstances.ToString01">
            <summary>设置 Collation.ToString() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.Bind(System.Collections.Generic.IComparer{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.Bind(System.Collections.Generic.IComparer{System.String})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimCollation.Bind(System.Collections.Generic.IEqualityComparer{LiteDB.BsonValue})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.CompareBsonValueBsonValue">
            <summary>设置 Collation.Compare(BsonValue left, BsonValue rigth) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.CompareStringString">
            <summary>设置 Collation.Compare(String left, String right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.ConstructorInt32CompareOptions">
            <summary>设置 Collation.Collation(Int32 lcid, CompareOptions sortOptions) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.ConstructorString">
            <summary>设置 Collation.Collation(String collation) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.CultureGet">
            <summary>设置 Collation.get_Culture() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.EqualsBsonValueBsonValue">
            <summary>设置 Collation.Equals(BsonValue x, BsonValue y) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.GetHashCodeBsonValue">
            <summary>设置 Collation.GetHashCode(BsonValue obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.LCIDGet">
            <summary>设置 Collation.get_LCID() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.SortOptionsGet">
            <summary>设置 Collation.get_SortOptions() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.StaticConstructor">
            <summary>设置 Collation.Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimCollation.ToString">
            <summary>设置 Collation.ToString() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimConnectionString">
            <summary>LiteDB.ConnectionString 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimConnectionString.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimConnectionString.#ctor(LiteDB.ConnectionString)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimConnectionString.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.CollationGet">
            <summary>设置 ConnectionString.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.CollationSetCollation">
            <summary>设置 ConnectionString.set_Collation(Collation value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.ConnectionGet">
            <summary>设置 ConnectionString.get_Connection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.ConnectionSetConnectionType">
            <summary>设置 ConnectionString.set_Connection(ConnectionType value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.CreateEngine">
            <summary>设置 ConnectionString.CreateEngine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.FilenameGet">
            <summary>设置 ConnectionString.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.FilenameSetString">
            <summary>设置 ConnectionString.set_Filename(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.InitialSizeGet">
            <summary>设置 ConnectionString.get_InitialSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.InitialSizeSetInt64">
            <summary>设置 ConnectionString.set_InitialSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.ItemGetString">
            <summary>设置 ConnectionString.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.PasswordGet">
            <summary>设置 ConnectionString.get_Password() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.PasswordSetString">
            <summary>设置 ConnectionString.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.ReadOnlyGet">
            <summary>设置 ConnectionString.get_ReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.ReadOnlySetBoolean">
            <summary>设置 ConnectionString.set_ReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.UpgradeGet">
            <summary>设置 ConnectionString.get_Upgrade() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.AllInstances.UpgradeSetBoolean">
            <summary>设置 ConnectionString.set_Upgrade(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimConnectionString.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimConnectionString.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.CollationGet">
            <summary>设置 ConnectionString.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.CollationSetCollation">
            <summary>设置 ConnectionString.set_Collation(Collation value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.ConnectionGet">
            <summary>设置 ConnectionString.get_Connection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.ConnectionSetConnectionType">
            <summary>设置 ConnectionString.set_Connection(ConnectionType value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.Constructor">
            <summary>设置 ConnectionString.ConnectionString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.ConstructorString">
            <summary>设置 ConnectionString.ConnectionString(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.CreateEngine">
            <summary>设置 ConnectionString.CreateEngine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.FilenameGet">
            <summary>设置 ConnectionString.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.FilenameSetString">
            <summary>设置 ConnectionString.set_Filename(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.InitialSizeGet">
            <summary>设置 ConnectionString.get_InitialSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.InitialSizeSetInt64">
            <summary>设置 ConnectionString.set_InitialSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.ItemGetString">
            <summary>设置 ConnectionString.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.PasswordGet">
            <summary>设置 ConnectionString.get_Password() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.PasswordSetString">
            <summary>设置 ConnectionString.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.ReadOnlyGet">
            <summary>设置 ConnectionString.get_ReadOnly() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.ReadOnlySetBoolean">
            <summary>设置 ConnectionString.set_ReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.UpgradeGet">
            <summary>设置 ConnectionString.get_Upgrade() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimConnectionString.UpgradeSetBoolean">
            <summary>设置 ConnectionString.set_Upgrade(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimDefaultTypeNameBinder">
            <summary>LiteDB.DefaultTypeNameBinder 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimDefaultTypeNameBinder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimDefaultTypeNameBinder.#ctor(LiteDB.DefaultTypeNameBinder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimDefaultTypeNameBinder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.AllInstances.GetNameType">
            <summary>设置 DefaultTypeNameBinder.GetName(Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.AllInstances.GetTypeString">
            <summary>设置 DefaultTypeNameBinder.GetType(String name) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimDefaultTypeNameBinder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimDefaultTypeNameBinder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimDefaultTypeNameBinder.Bind(LiteDB.ITypeNameBinder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.Constructor">
            <summary>设置 DefaultTypeNameBinder.DefaultTypeNameBinder() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.GetNameType">
            <summary>设置 DefaultTypeNameBinder.GetName(Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.GetTypeString">
            <summary>设置 DefaultTypeNameBinder.GetType(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.InstanceGet">
            <summary>设置 DefaultTypeNameBinder.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimDefaultTypeNameBinder.StaticConstructor">
            <summary>设置 DefaultTypeNameBinder.DefaultTypeNameBinder() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimEntityBuilder`1">
            <summary>LiteDB.EntityBuilder`1 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.#ctor(LiteDB.EntityBuilder{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances.CtorFuncOfBsonDocumentT0">
            <summary>设置 EntityBuilder`1.Ctor(Func`2&lt;BsonDocument,!0&gt; createInstance) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances.DbRefOf1ExpressionOfFuncOfT0M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.EntityBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.DbRef(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member, String collection) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances.FieldOf1ExpressionOfFuncOfT0M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.EntityBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.Field(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member, String field) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances.GetMemberOf2ExpressionOfFuncOfM0M1ActionOfMemberMapper``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.EntityBuilder{`0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{LiteDB.MemberMapper},LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.GetMember(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; member, Action`1&lt;MemberMapper&gt; action) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances.IdOf1ExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.EntityBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.Id(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member, Boolean autoId) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances.IgnoreOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.EntityBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.Ignore(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.AllInstances._Ignoreb__4_0Of1MemberMapper``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{LiteDB.EntityBuilder{`0},LiteDB.MemberMapper})">
            <summary>设置 EntityBuilder`1.&lt;Ignore&gt;b__4_0(MemberMapper p) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityBuilder`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityBuilder`1.ConstructorBsonMapperITypeNameBinder">
            <summary>设置 EntityBuilder`1.EntityBuilder`1(BsonMapper mapper, ITypeNameBinder typeNameBinder) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityBuilder`1.CtorFuncOfBsonDocumentT0">
            <summary>设置 EntityBuilder`1.Ctor(Func`2&lt;BsonDocument,!0&gt; createInstance) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.DbRefOf1ExpressionOfFuncOfT0M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.DbRef(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member, String collection) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.FieldOf1ExpressionOfFuncOfT0M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.Field(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member, String field) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.GetMemberOf2ExpressionOfFuncOfM0M1ActionOfMemberMapper``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{LiteDB.MemberMapper},LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.GetMember(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; member, Action`1&lt;MemberMapper&gt; action) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.IdOf1ExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.Id(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member, Boolean autoId) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1.IgnoreOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.EntityBuilder{`0}})">
            <summary>设置 EntityBuilder`1.Ignore(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; member) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityBuilder`1._Ignoreb__4_0Of1MemberMapper``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{LiteDB.MemberMapper})">
            <summary>设置 EntityBuilder`1.&lt;Ignore&gt;b__4_0(MemberMapper p) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimEntityMapper">
            <summary>LiteDB.EntityMapper 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityMapper.#ctor(LiteDB.EntityMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimEntityMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.AllInstances.CreateInstanceGet">
            <summary>设置 EntityMapper.get_CreateInstance() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.AllInstances.CreateInstanceSetCreateObject">
            <summary>设置 EntityMapper.set_CreateInstance(CreateObject value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.AllInstances.ForTypeGet">
            <summary>设置 EntityMapper.get_ForType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.AllInstances.GetMemberExpression">
            <summary>设置 EntityMapper.GetMember(Expression expr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.AllInstances.IdGet">
            <summary>设置 EntityMapper.get_Id() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.AllInstances.MembersGet">
            <summary>设置 EntityMapper.get_Members() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimEntityMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.ConstructorType">
            <summary>设置 EntityMapper.EntityMapper(Type forType) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.CreateInstanceGet">
            <summary>设置 EntityMapper.get_CreateInstance() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.CreateInstanceSetCreateObject">
            <summary>设置 EntityMapper.set_CreateInstance(CreateObject value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.ForTypeGet">
            <summary>设置 EntityMapper.get_ForType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.GetMemberExpression">
            <summary>设置 EntityMapper.GetMember(Expression expr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.IdGet">
            <summary>设置 EntityMapper.get_Id() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimEntityMapper.MembersGet">
            <summary>设置 EntityMapper.get_Members() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimJsonReader">
            <summary>LiteDB.JsonReader 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonReader.#ctor(LiteDB.JsonReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimJsonReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.AllInstances.Deserialize">
            <summary>设置 JsonReader.Deserialize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.AllInstances.DeserializeArray">
            <summary>设置 JsonReader.DeserializeArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.AllInstances.PositionGet">
            <summary>设置 JsonReader.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.AllInstances.ReadArray">
            <summary>设置 JsonReader.ReadArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.AllInstances.ReadExtendedDataTypeStringString">
            <summary>设置 JsonReader.ReadExtendedDataType(String key, String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.AllInstances.ReadObject">
            <summary>设置 JsonReader.ReadObject() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.ConstructorTextReader">
            <summary>设置 JsonReader.JsonReader(TextReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.Deserialize">
            <summary>设置 JsonReader.Deserialize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.DeserializeArray">
            <summary>设置 JsonReader.DeserializeArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.PositionGet">
            <summary>设置 JsonReader.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.ReadArray">
            <summary>设置 JsonReader.ReadArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.ReadExtendedDataTypeStringString">
            <summary>设置 JsonReader.ReadExtendedDataType(String key, String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.ReadObject">
            <summary>设置 JsonReader.ReadObject() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonReader.StaticConstructor">
            <summary>设置 JsonReader.JsonReader() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimJsonSerializer">
            <summary>LiteDB.JsonSerializer 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonSerializer.#ctor(LiteDB.JsonSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimJsonSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.Constructor">
            <summary>设置 JsonSerializer.JsonSerializer() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.DeserializeArrayString">
            <summary>设置 JsonSerializer.DeserializeArray(String json) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.DeserializeArrayTextReader">
            <summary>设置 JsonSerializer.DeserializeArray(TextReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.DeserializeString">
            <summary>设置 JsonSerializer.Deserialize(String json) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.DeserializeTextReader">
            <summary>设置 JsonSerializer.Deserialize(TextReader reader) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.SerializeBsonValue">
            <summary>设置 JsonSerializer.Serialize(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.SerializeBsonValueStringBuilder">
            <summary>设置 JsonSerializer.Serialize(BsonValue value, StringBuilder sb) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonSerializer.SerializeBsonValueTextWriter">
            <summary>设置 JsonSerializer.Serialize(BsonValue value, TextWriter writer) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimJsonWriter">
            <summary>LiteDB.JsonWriter 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonWriter.#ctor(LiteDB.JsonWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimJsonWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.IndentGet">
            <summary>设置 JsonWriter.get_Indent() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.IndentSetInt32">
            <summary>设置 JsonWriter.set_Indent(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.PrettyGet">
            <summary>设置 JsonWriter.get_Pretty() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.PrettySetBoolean">
            <summary>设置 JsonWriter.set_Pretty(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.SerializeBsonValue">
            <summary>设置 JsonWriter.Serialize(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteArrayBsonArray">
            <summary>设置 JsonWriter.WriteArray(BsonArray arr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteEndBlockStringBoolean">
            <summary>设置 JsonWriter.WriteEndBlock(String str, Boolean hasData) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteExtendDataTypeStringString">
            <summary>设置 JsonWriter.WriteExtendDataType(String type, String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteIndent">
            <summary>设置 JsonWriter.WriteIndent() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteKeyValueStringBsonValueBoolean">
            <summary>设置 JsonWriter.WriteKeyValue(String key, BsonValue value, Boolean comma) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteNewLine">
            <summary>设置 JsonWriter.WriteNewLine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteObjectBsonDocument">
            <summary>设置 JsonWriter.WriteObject(BsonDocument obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteStartBlockStringBoolean">
            <summary>设置 JsonWriter.WriteStartBlock(String str, Boolean hasData) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteStringString">
            <summary>设置 JsonWriter.WriteString(String s) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.AllInstances.WriteValueBsonValue">
            <summary>设置 JsonWriter.WriteValue(BsonValue value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimJsonWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.ConstructorTextWriter">
            <summary>设置 JsonWriter.JsonWriter(TextWriter writer) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.IndentGet">
            <summary>设置 JsonWriter.get_Indent() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.IndentSetInt32">
            <summary>设置 JsonWriter.set_Indent(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.PrettyGet">
            <summary>设置 JsonWriter.get_Pretty() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.PrettySetBoolean">
            <summary>设置 JsonWriter.set_Pretty(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.SerializeBsonValue">
            <summary>设置 JsonWriter.Serialize(BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.StaticConstructor">
            <summary>设置 JsonWriter.JsonWriter() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteArrayBsonArray">
            <summary>设置 JsonWriter.WriteArray(BsonArray arr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteEndBlockStringBoolean">
            <summary>设置 JsonWriter.WriteEndBlock(String str, Boolean hasData) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteExtendDataTypeStringString">
            <summary>设置 JsonWriter.WriteExtendDataType(String type, String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteIndent">
            <summary>设置 JsonWriter.WriteIndent() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteKeyValueStringBsonValueBoolean">
            <summary>设置 JsonWriter.WriteKeyValue(String key, BsonValue value, Boolean comma) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteNewLine">
            <summary>设置 JsonWriter.WriteNewLine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteObjectBsonDocument">
            <summary>设置 JsonWriter.WriteObject(BsonDocument obj) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteStartBlockStringBoolean">
            <summary>设置 JsonWriter.WriteStartBlock(String str, Boolean hasData) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteStringString">
            <summary>设置 JsonWriter.WriteString(String s) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimJsonWriter.WriteValueBsonValue">
            <summary>设置 JsonWriter.WriteValue(BsonValue value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteCollection`1">
            <summary>LiteDB.LiteCollection`1 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.#ctor(LiteDB.LiteCollection{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteCollection`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.AutoIdGet">
            <summary>设置 LiteCollection`1.get_AutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.Count">
            <summary>设置 LiteCollection`1.Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.CountBsonExpression">
            <summary>设置 LiteCollection`1.Count(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.CountExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.Count(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.CountQuery">
            <summary>设置 LiteCollection`1.Count(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.CountStringBsonDocument">
            <summary>设置 LiteCollection`1.Count(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.CountStringBsonValueArray">
            <summary>设置 LiteCollection`1.Count(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DeleteAll">
            <summary>设置 LiteCollection`1.DeleteAll() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DeleteBsonValue">
            <summary>设置 LiteCollection`1.Delete(BsonValue id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DeleteManyBsonExpression">
            <summary>设置 LiteCollection`1.DeleteMany(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DeleteManyExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.DeleteMany(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DeleteManyStringBsonDocument">
            <summary>设置 LiteCollection`1.DeleteMany(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DeleteManyStringBsonValueArray">
            <summary>设置 LiteCollection`1.DeleteMany(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.DropIndexString">
            <summary>设置 LiteCollection`1.DropIndex(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.EnsureIndexBsonExpressionBoolean">
            <summary>设置 LiteCollection`1.EnsureIndex(BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.EnsureIndexOf1ExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteCollection{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Boolean})">
            <summary>设置 LiteCollection`1.EnsureIndex(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.EnsureIndexOf1StringExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteCollection{`0},System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Boolean})">
            <summary>设置 LiteCollection`1.EnsureIndex(String name, Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.EnsureIndexStringBsonExpressionBoolean">
            <summary>设置 LiteCollection`1.EnsureIndex(String name, BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.EntityMapperGet">
            <summary>设置 LiteCollection`1.get_EntityMapper() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.ExistsBsonExpression">
            <summary>设置 LiteCollection`1.Exists(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.ExistsExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.Exists(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.ExistsQuery">
            <summary>设置 LiteCollection`1.Exists(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.ExistsStringBsonDocument">
            <summary>设置 LiteCollection`1.Exists(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.ExistsStringBsonValueArray">
            <summary>设置 LiteCollection`1.Exists(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindAll">
            <summary>设置 LiteCollection`1.FindAll() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindBsonExpressionInt32Int32">
            <summary>设置 LiteCollection`1.Find(BsonExpression predicate, Int32 skip, Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindByIdBsonValue">
            <summary>设置 LiteCollection`1.FindById(BsonValue id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindExpressionOfFuncOfT0BooleanInt32Int32">
            <summary>设置 LiteCollection`1.Find(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate, Int32 skip, Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindOneBsonExpression">
            <summary>设置 LiteCollection`1.FindOne(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindOneBsonExpressionBsonValueArray">
            <summary>设置 LiteCollection`1.FindOne(BsonExpression predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindOneExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.FindOne(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindOneQuery">
            <summary>设置 LiteCollection`1.FindOne(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindOneStringBsonDocument">
            <summary>设置 LiteCollection`1.FindOne(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.FindQueryInt32Int32">
            <summary>设置 LiteCollection`1.Find(Query query, Int32 skip, Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.GetBsonDocsIEnumerableOfT0">
            <summary>设置 LiteCollection`1.GetBsonDocs(IEnumerable`1&lt;!0&gt; documents) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.GetIndexExpressionOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteCollection{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.BsonExpression})">
            <summary>设置 LiteCollection`1.GetIndexExpression(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.IncludeBsonExpression">
            <summary>设置 LiteCollection`1.Include(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.IncludeOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteCollection{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteCollection{`0}})">
            <summary>设置 LiteCollection`1.Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.InsertBsonValueT0">
            <summary>设置 LiteCollection`1.Insert(BsonValue id, !0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.InsertBulkIEnumerableOfT0Int32">
            <summary>设置 LiteCollection`1.InsertBulk(IEnumerable`1&lt;!0&gt; entities, Int32 batchSize) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.InsertIEnumerableOfT0">
            <summary>设置 LiteCollection`1.Insert(IEnumerable`1&lt;!0&gt; entities) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.InsertT0">
            <summary>设置 LiteCollection`1.Insert(!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.LongCount">
            <summary>设置 LiteCollection`1.LongCount() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.LongCountBsonExpression">
            <summary>设置 LiteCollection`1.LongCount(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.LongCountExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.LongCount(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.LongCountQuery">
            <summary>设置 LiteCollection`1.LongCount(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.LongCountStringBsonDocument">
            <summary>设置 LiteCollection`1.LongCount(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.LongCountStringBsonValueArray">
            <summary>设置 LiteCollection`1.LongCount(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.Max">
            <summary>设置 LiteCollection`1.Max() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.MaxBsonExpression">
            <summary>设置 LiteCollection`1.Max(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.MaxOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteCollection{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0})">
            <summary>设置 LiteCollection`1.Max(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.Min">
            <summary>设置 LiteCollection`1.Min() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.MinBsonExpression">
            <summary>设置 LiteCollection`1.Min(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.MinOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteCollection{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0})">
            <summary>设置 LiteCollection`1.Min(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.NameGet">
            <summary>设置 LiteCollection`1.get_Name() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.Query">
            <summary>设置 LiteCollection`1.Query() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.RemoveDocIdBsonDocument">
            <summary>设置 LiteCollection`1.RemoveDocId(BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpdateBsonValueT0">
            <summary>设置 LiteCollection`1.Update(BsonValue id, !0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpdateIEnumerableOfT0">
            <summary>设置 LiteCollection`1.Update(IEnumerable`1&lt;!0&gt; entities) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpdateManyBsonExpressionBsonExpression">
            <summary>设置 LiteCollection`1.UpdateMany(BsonExpression transform, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpdateManyExpressionOfFuncOfT0T0ExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.UpdateMany(Expression`1&lt;Func`2&lt;!0,!0&gt;&gt; extend, Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpdateT0">
            <summary>设置 LiteCollection`1.Update(!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpsertBsonValueT0">
            <summary>设置 LiteCollection`1.Upsert(BsonValue id, !0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpsertIEnumerableOfT0">
            <summary>设置 LiteCollection`1.Upsert(IEnumerable`1&lt;!0&gt; entities) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances.UpsertT0">
            <summary>设置 LiteCollection`1.Upsert(!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AllInstances._Updateb__56_0T0">
            <summary>设置 LiteCollection`1.&lt;Update&gt;b__56_0(!0 x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.AutoIdGet">
            <summary>设置 LiteCollection`1.get_AutoId() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.Bind(LiteDB.ILiteCollection{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.ConstructorStringBsonAutoIdILiteEngineBsonMapper">
            <summary>设置 LiteCollection`1.LiteCollection`1(String name, BsonAutoId autoId, ILiteEngine engine, BsonMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.Count">
            <summary>设置 LiteCollection`1.Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.CountBsonExpression">
            <summary>设置 LiteCollection`1.Count(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.CountExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.Count(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.CountQuery">
            <summary>设置 LiteCollection`1.Count(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.CountStringBsonDocument">
            <summary>设置 LiteCollection`1.Count(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.CountStringBsonValueArray">
            <summary>设置 LiteCollection`1.Count(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DeleteAll">
            <summary>设置 LiteCollection`1.DeleteAll() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DeleteBsonValue">
            <summary>设置 LiteCollection`1.Delete(BsonValue id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DeleteManyBsonExpression">
            <summary>设置 LiteCollection`1.DeleteMany(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DeleteManyExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.DeleteMany(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DeleteManyStringBsonDocument">
            <summary>设置 LiteCollection`1.DeleteMany(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DeleteManyStringBsonValueArray">
            <summary>设置 LiteCollection`1.DeleteMany(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.DropIndexString">
            <summary>设置 LiteCollection`1.DropIndex(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.EnsureIndexBsonExpressionBoolean">
            <summary>设置 LiteCollection`1.EnsureIndex(BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.EnsureIndexOf1ExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Boolean})">
            <summary>设置 LiteCollection`1.EnsureIndex(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.EnsureIndexOf1StringExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Boolean})">
            <summary>设置 LiteCollection`1.EnsureIndex(String name, Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.EnsureIndexStringBsonExpressionBoolean">
            <summary>设置 LiteCollection`1.EnsureIndex(String name, BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.EntityMapperGet">
            <summary>设置 LiteCollection`1.get_EntityMapper() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.ExistsBsonExpression">
            <summary>设置 LiteCollection`1.Exists(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.ExistsExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.Exists(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.ExistsQuery">
            <summary>设置 LiteCollection`1.Exists(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.ExistsStringBsonDocument">
            <summary>设置 LiteCollection`1.Exists(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.ExistsStringBsonValueArray">
            <summary>设置 LiteCollection`1.Exists(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindAll">
            <summary>设置 LiteCollection`1.FindAll() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindBsonExpressionInt32Int32">
            <summary>设置 LiteCollection`1.Find(BsonExpression predicate, Int32 skip, Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindByIdBsonValue">
            <summary>设置 LiteCollection`1.FindById(BsonValue id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindExpressionOfFuncOfT0BooleanInt32Int32">
            <summary>设置 LiteCollection`1.Find(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate, Int32 skip, Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindOneBsonExpression">
            <summary>设置 LiteCollection`1.FindOne(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindOneBsonExpressionBsonValueArray">
            <summary>设置 LiteCollection`1.FindOne(BsonExpression predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindOneExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.FindOne(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindOneQuery">
            <summary>设置 LiteCollection`1.FindOne(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindOneStringBsonDocument">
            <summary>设置 LiteCollection`1.FindOne(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.FindQueryInt32Int32">
            <summary>设置 LiteCollection`1.Find(Query query, Int32 skip, Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.GetBsonDocsIEnumerableOfT0">
            <summary>设置 LiteCollection`1.GetBsonDocs(IEnumerable`1&lt;!0&gt; documents) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.GetIndexExpressionOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.BsonExpression})">
            <summary>设置 LiteCollection`1.GetIndexExpression(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.IncludeBsonExpression">
            <summary>设置 LiteCollection`1.Include(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.IncludeOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteCollection{`0}})">
            <summary>设置 LiteCollection`1.Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.InsertBsonValueT0">
            <summary>设置 LiteCollection`1.Insert(BsonValue id, !0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.InsertBulkIEnumerableOfT0Int32">
            <summary>设置 LiteCollection`1.InsertBulk(IEnumerable`1&lt;!0&gt; entities, Int32 batchSize) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.InsertIEnumerableOfT0">
            <summary>设置 LiteCollection`1.Insert(IEnumerable`1&lt;!0&gt; entities) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.InsertT0">
            <summary>设置 LiteCollection`1.Insert(!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.LongCount">
            <summary>设置 LiteCollection`1.LongCount() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.LongCountBsonExpression">
            <summary>设置 LiteCollection`1.LongCount(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.LongCountExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.LongCount(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.LongCountQuery">
            <summary>设置 LiteCollection`1.LongCount(Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.LongCountStringBsonDocument">
            <summary>设置 LiteCollection`1.LongCount(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.LongCountStringBsonValueArray">
            <summary>设置 LiteCollection`1.LongCount(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.Max">
            <summary>设置 LiteCollection`1.Max() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.MaxBsonExpression">
            <summary>设置 LiteCollection`1.Max(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.MaxOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0})">
            <summary>设置 LiteCollection`1.Max(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.Min">
            <summary>设置 LiteCollection`1.Min() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.MinBsonExpression">
            <summary>设置 LiteCollection`1.Min(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteCollection`1.MinOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0})">
            <summary>设置 LiteCollection`1.Min(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.NameGet">
            <summary>设置 LiteCollection`1.get_Name() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.Query">
            <summary>设置 LiteCollection`1.Query() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.RemoveDocIdBsonDocument">
            <summary>设置 LiteCollection`1.RemoveDocId(BsonDocument doc) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpdateBsonValueT0">
            <summary>设置 LiteCollection`1.Update(BsonValue id, !0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpdateIEnumerableOfT0">
            <summary>设置 LiteCollection`1.Update(IEnumerable`1&lt;!0&gt; entities) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpdateManyBsonExpressionBsonExpression">
            <summary>设置 LiteCollection`1.UpdateMany(BsonExpression transform, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpdateManyExpressionOfFuncOfT0T0ExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteCollection`1.UpdateMany(Expression`1&lt;Func`2&lt;!0,!0&gt;&gt; extend, Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpdateT0">
            <summary>设置 LiteCollection`1.Update(!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpsertBsonValueT0">
            <summary>设置 LiteCollection`1.Upsert(BsonValue id, !0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpsertIEnumerableOfT0">
            <summary>设置 LiteCollection`1.Upsert(IEnumerable`1&lt;!0&gt; entities) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1.UpsertT0">
            <summary>设置 LiteCollection`1.Upsert(!0 entity) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteCollection`1._Updateb__56_0T0">
            <summary>设置 LiteCollection`1.&lt;Update&gt;b__56_0(!0 x) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteDatabase">
            <summary>LiteDB.LiteDatabase 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.#ctor(LiteDB.LiteDatabase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteDatabase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.BeginTrans">
            <summary>设置 LiteDatabase.BeginTrans() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.Checkpoint">
            <summary>设置 LiteDatabase.Checkpoint() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.CheckpointSizeGet">
            <summary>设置 LiteDatabase.get_CheckpointSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.CheckpointSizeSetInt32">
            <summary>设置 LiteDatabase.set_CheckpointSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.CollationGet">
            <summary>设置 LiteDatabase.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.CollectionExistsString">
            <summary>设置 LiteDatabase.CollectionExists(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.Commit">
            <summary>设置 LiteDatabase.Commit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.Dispose">
            <summary>设置 LiteDatabase.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.DisposeBoolean">
            <summary>设置 LiteDatabase.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.DropCollectionString">
            <summary>设置 LiteDatabase.DropCollection(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.ExecuteStringBsonDocument">
            <summary>设置 LiteDatabase.Execute(String command, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.ExecuteStringBsonValueArray">
            <summary>设置 LiteDatabase.Execute(String command, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.ExecuteTextReaderBsonDocument">
            <summary>设置 LiteDatabase.Execute(TextReader commandReader, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.FileStorageGet">
            <summary>设置 LiteDatabase.get_FileStorage() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.GetCollectionNames">
            <summary>设置 LiteDatabase.GetCollectionNames() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.AllInstances.GetCollectionOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteDatabase,LiteDB.ILiteCollection{``0}})">
            <summary>设置 LiteDatabase.GetCollection() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.AllInstances.GetCollectionOf1BsonAutoId``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteDatabase,LiteDB.BsonAutoId,LiteDB.ILiteCollection{``0}})">
            <summary>设置 LiteDatabase.GetCollection(BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.AllInstances.GetCollectionOf1StringBsonAutoId``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteDatabase,System.String,LiteDB.BsonAutoId,LiteDB.ILiteCollection{``0}})">
            <summary>设置 LiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.GetCollectionStringBsonAutoId">
            <summary>设置 LiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.AllInstances.GetStorageOf1StringString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteDatabase,System.String,System.String,LiteDB.ILiteStorage{``0}})">
            <summary>设置 LiteDatabase.GetStorage(String filesCollection, String chunksCollection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.LimitSizeGet">
            <summary>设置 LiteDatabase.get_LimitSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.LimitSizeSetInt64">
            <summary>设置 LiteDatabase.set_LimitSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.MapperGet">
            <summary>设置 LiteDatabase.get_Mapper() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.PragmaString">
            <summary>设置 LiteDatabase.Pragma(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.PragmaStringBsonValue">
            <summary>设置 LiteDatabase.Pragma(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.RebuildRebuildOptions">
            <summary>设置 LiteDatabase.Rebuild(RebuildOptions options) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.RenameCollectionStringString">
            <summary>设置 LiteDatabase.RenameCollection(String oldName, String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.Rollback">
            <summary>设置 LiteDatabase.Rollback() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.TimeoutGet">
            <summary>设置 LiteDatabase.get_Timeout() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.TimeoutSetTimeSpan">
            <summary>设置 LiteDatabase.set_Timeout(TimeSpan value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.UserVersionGet">
            <summary>设置 LiteDatabase.get_UserVersion() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.UserVersionSetInt32">
            <summary>设置 LiteDatabase.set_UserVersion(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.UtcDateGet">
            <summary>设置 LiteDatabase.get_UtcDate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.AllInstances.UtcDateSetBoolean">
            <summary>设置 LiteDatabase.set_UtcDate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.BeginTrans">
            <summary>设置 LiteDatabase.BeginTrans() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.Bind(LiteDB.ILiteDatabase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.Checkpoint">
            <summary>设置 LiteDatabase.Checkpoint() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.CheckpointSizeGet">
            <summary>设置 LiteDatabase.get_CheckpointSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.CheckpointSizeSetInt32">
            <summary>设置 LiteDatabase.set_CheckpointSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.CollationGet">
            <summary>设置 LiteDatabase.get_Collation() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.CollectionExistsString">
            <summary>设置 LiteDatabase.CollectionExists(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.Commit">
            <summary>设置 LiteDatabase.Commit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ConstructorConnectionStringBsonMapper">
            <summary>设置 LiteDatabase.LiteDatabase(ConnectionString connectionString, BsonMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ConstructorILiteEngineBsonMapperBoolean">
            <summary>设置 LiteDatabase.LiteDatabase(ILiteEngine engine, BsonMapper mapper, Boolean disposeOnClose) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ConstructorStreamBsonMapperStream">
            <summary>设置 LiteDatabase.LiteDatabase(Stream stream, BsonMapper mapper, Stream logStream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ConstructorStringBsonMapper">
            <summary>设置 LiteDatabase.LiteDatabase(String connectionString, BsonMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.Dispose">
            <summary>设置 LiteDatabase.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.DisposeBoolean">
            <summary>设置 LiteDatabase.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.DropCollectionString">
            <summary>设置 LiteDatabase.DropCollection(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ExecuteStringBsonDocument">
            <summary>设置 LiteDatabase.Execute(String command, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ExecuteStringBsonValueArray">
            <summary>设置 LiteDatabase.Execute(String command, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.ExecuteTextReaderBsonDocument">
            <summary>设置 LiteDatabase.Execute(TextReader commandReader, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.FileStorageGet">
            <summary>设置 LiteDatabase.get_FileStorage() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.GetCollectionNames">
            <summary>设置 LiteDatabase.GetCollectionNames() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.GetCollectionOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.ILiteCollection{``0}})">
            <summary>设置 LiteDatabase.GetCollection() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.GetCollectionOf1BsonAutoId``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonAutoId,LiteDB.ILiteCollection{``0}})">
            <summary>设置 LiteDatabase.GetCollection(BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.GetCollectionOf1StringBsonAutoId``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,LiteDB.BsonAutoId,LiteDB.ILiteCollection{``0}})">
            <summary>设置 LiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.GetCollectionStringBsonAutoId">
            <summary>设置 LiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteDatabase.GetStorageOf1StringString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.String,LiteDB.ILiteStorage{``0}})">
            <summary>设置 LiteDatabase.GetStorage(String filesCollection, String chunksCollection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.LimitSizeGet">
            <summary>设置 LiteDatabase.get_LimitSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.LimitSizeSetInt64">
            <summary>设置 LiteDatabase.set_LimitSize(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.MapperGet">
            <summary>设置 LiteDatabase.get_Mapper() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.PragmaString">
            <summary>设置 LiteDatabase.Pragma(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.PragmaStringBsonValue">
            <summary>设置 LiteDatabase.Pragma(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.RebuildRebuildOptions">
            <summary>设置 LiteDatabase.Rebuild(RebuildOptions options) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.RenameCollectionStringString">
            <summary>设置 LiteDatabase.RenameCollection(String oldName, String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.Rollback">
            <summary>设置 LiteDatabase.Rollback() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.TimeoutGet">
            <summary>设置 LiteDatabase.get_Timeout() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.TimeoutSetTimeSpan">
            <summary>设置 LiteDatabase.set_Timeout(TimeSpan value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.UserVersionGet">
            <summary>设置 LiteDatabase.get_UserVersion() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.UserVersionSetInt32">
            <summary>设置 LiteDatabase.set_UserVersion(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.UtcDateGet">
            <summary>设置 LiteDatabase.get_UtcDate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteDatabase.UtcDateSetBoolean">
            <summary>设置 LiteDatabase.set_UtcDate(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteException">
            <summary>LiteDB.LiteException 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteException.#ctor(LiteDB.LiteException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AllInstances.ErrorCodeGet">
            <summary>设置 LiteException.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AllInstances.ErrorCodeSetInt32">
            <summary>设置 LiteException.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AllInstances.PositionGet">
            <summary>设置 LiteException.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AllInstances.PositionSetInt64">
            <summary>设置 LiteException.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AlreadyExistsCollectionNameString">
            <summary>设置 LiteException.AlreadyExistsCollectionName(String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AlreadyExistsTransaction">
            <summary>设置 LiteException.AlreadyExistsTransaction() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AlreadyOpenDatafileString">
            <summary>设置 LiteException.AlreadyOpenDatafile(String filename) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.AvoidUseOfProcess">
            <summary>设置 LiteException.AvoidUseOfProcess() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.CollectionAlreadyExistString">
            <summary>设置 LiteException.CollectionAlreadyExist(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.CollectionLimitExceededInt32">
            <summary>设置 LiteException.CollectionLimitExceeded(Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.CollectionLockerNotFoundString">
            <summary>设置 LiteException.CollectionLockerNotFound(String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.CollectionNotFoundString">
            <summary>设置 LiteException.CollectionNotFound(String key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.ConstructorInt32ExceptionStringObjectArray">
            <summary>设置 LiteException.LiteException(Int32 code, Exception inner, String message, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.ConstructorInt32String">
            <summary>设置 LiteException.LiteException(Int32 code, String message) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.ConstructorInt32StringObjectArray">
            <summary>设置 LiteException.LiteException(Int32 code, String message, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.DataTypeNotAssignableStringString">
            <summary>设置 LiteException.DataTypeNotAssignable(String type1, String type2) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.DatabaseShutdown">
            <summary>设置 LiteException.DatabaseShutdown() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.DocumentMaxDepthInt32Type">
            <summary>设置 LiteException.DocumentMaxDepth(Int32 depth, Type type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.ErrorCodeGet">
            <summary>设置 LiteException.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.ErrorCodeSetInt32">
            <summary>设置 LiteException.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.FileNotEncrypted">
            <summary>设置 LiteException.FileNotEncrypted() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.FileNotFoundObject">
            <summary>设置 LiteException.FileNotFound(Object fileId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.FileSizeExceededInt64">
            <summary>设置 LiteException.FileSizeExceeded(Int64 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.IndexAlreadyExistString">
            <summary>设置 LiteException.IndexAlreadyExist(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.IndexDropId">
            <summary>设置 LiteException.IndexDropId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.IndexDuplicateKeyStringBsonValue">
            <summary>设置 LiteException.IndexDuplicateKey(String field, BsonValue key) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.IndexNameLimitExceededInt32">
            <summary>设置 LiteException.IndexNameLimitExceeded(Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.IndexNotFoundString">
            <summary>设置 LiteException.IndexNotFound(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InitialSizeCryptoNotSupported">
            <summary>设置 LiteException.InitialSizeCryptoNotSupported() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidCollectionNameStringString">
            <summary>设置 LiteException.InvalidCollectionName(String name, String reason) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidCommandString">
            <summary>设置 LiteException.InvalidCommand(String command) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidCtorTypeException">
            <summary>设置 LiteException.InvalidCtor(Type type, Exception inner) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidDataTypeStringBsonValue">
            <summary>设置 LiteException.InvalidDataType(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidDatabase">
            <summary>设置 LiteException.InvalidDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidDbRefString">
            <summary>设置 LiteException.InvalidDbRef(String path) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidExpressionTypeBsonExpressionBsonExpressionType">
            <summary>设置 LiteException.InvalidExpressionType(BsonExpression expr, BsonExpressionType type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidExpressionTypePredicateBsonExpression">
            <summary>设置 LiteException.InvalidExpressionTypePredicate(BsonExpression expr) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidFormatString">
            <summary>设置 LiteException.InvalidFormat(String field) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidFreeSpacePageUInt32Int32Int32">
            <summary>设置 LiteException.InvalidFreeSpacePage(UInt32 pageID, Int32 freeBytes, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidIndexKeyString">
            <summary>设置 LiteException.InvalidIndexKey(String text) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidIndexNameStringStringString">
            <summary>设置 LiteException.InvalidIndexName(String name, String collection, String reason) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidInitialSize">
            <summary>设置 LiteException.InvalidInitialSize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidNullCharInString">
            <summary>设置 LiteException.InvalidNullCharInString() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidPassword">
            <summary>设置 LiteException.InvalidPassword() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidTypedNameString">
            <summary>设置 LiteException.InvalidTypedName(String type) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.InvalidUpdateFieldString">
            <summary>设置 LiteException.InvalidUpdateField(String field) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.LockTimeoutStringStringTimeSpan">
            <summary>设置 LiteException.LockTimeout(String mode, String collection, TimeSpan ts) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.LockTimeoutStringTimeSpan">
            <summary>设置 LiteException.LockTimeout(String mode, TimeSpan ts) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.PositionGet">
            <summary>设置 LiteException.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.PositionSetInt64">
            <summary>设置 LiteException.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.PropertyNotMappedString">
            <summary>设置 LiteException.PropertyNotMapped(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.PropertyReadWritePropertyInfo">
            <summary>设置 LiteException.PropertyReadWrite(PropertyInfo prop) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteException.TempEngineAlreadyDefined">
            <summary>设置 LiteException.TempEngineAlreadyDefined() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteFileInfo`1">
            <summary>LiteDB.LiteFileInfo`1 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileInfo`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileInfo`1.#ctor(LiteDB.LiteFileInfo{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.ChunksGet">
            <summary>设置 LiteFileInfo`1.get_Chunks() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.ChunksSetInt32">
            <summary>设置 LiteFileInfo`1.set_Chunks(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.CopyToStream">
            <summary>设置 LiteFileInfo`1.CopyTo(Stream stream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.FilenameGet">
            <summary>设置 LiteFileInfo`1.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.FilenameSetString">
            <summary>设置 LiteFileInfo`1.set_Filename(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.IdGet">
            <summary>设置 LiteFileInfo`1.get_Id() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.IdSetT0">
            <summary>设置 LiteFileInfo`1.set_Id(!0 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.LengthGet">
            <summary>设置 LiteFileInfo`1.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.LengthSetInt64">
            <summary>设置 LiteFileInfo`1.set_Length(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.MetadataGet">
            <summary>设置 LiteFileInfo`1.get_Metadata() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.MetadataSetBsonDocument">
            <summary>设置 LiteFileInfo`1.set_Metadata(BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.MimeTypeGet">
            <summary>设置 LiteFileInfo`1.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.MimeTypeSetString">
            <summary>设置 LiteFileInfo`1.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.OpenRead">
            <summary>设置 LiteFileInfo`1.OpenRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.OpenWrite">
            <summary>设置 LiteFileInfo`1.OpenWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.SaveAsStringBoolean">
            <summary>设置 LiteFileInfo`1.SaveAs(String filename, Boolean overwritten) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.SetReferenceBsonValueILiteCollectionOfLiteFileInfoOfT0ILiteCollectionOfBsonDocument">
            <summary>设置 LiteFileInfo`1.SetReference(BsonValue fileId, ILiteCollection`1&lt;LiteFileInfo`1&lt;!0&gt;&gt; files, ILiteCollection`1&lt;BsonDocument&gt; chunks) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.UploadDateGet">
            <summary>设置 LiteFileInfo`1.get_UploadDate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.AllInstances.UploadDateSetDateTime">
            <summary>设置 LiteFileInfo`1.set_UploadDate(DateTime value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileInfo`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileInfo`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.ChunksGet">
            <summary>设置 LiteFileInfo`1.get_Chunks() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.ChunksSetInt32">
            <summary>设置 LiteFileInfo`1.set_Chunks(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.Constructor">
            <summary>设置 LiteFileInfo`1.LiteFileInfo`1() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.CopyToStream">
            <summary>设置 LiteFileInfo`1.CopyTo(Stream stream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.FilenameGet">
            <summary>设置 LiteFileInfo`1.get_Filename() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.FilenameSetString">
            <summary>设置 LiteFileInfo`1.set_Filename(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.IdGet">
            <summary>设置 LiteFileInfo`1.get_Id() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.IdSetT0">
            <summary>设置 LiteFileInfo`1.set_Id(!0 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.LengthGet">
            <summary>设置 LiteFileInfo`1.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.LengthSetInt64">
            <summary>设置 LiteFileInfo`1.set_Length(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.MetadataGet">
            <summary>设置 LiteFileInfo`1.get_Metadata() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.MetadataSetBsonDocument">
            <summary>设置 LiteFileInfo`1.set_Metadata(BsonDocument value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.MimeTypeGet">
            <summary>设置 LiteFileInfo`1.get_MimeType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.MimeTypeSetString">
            <summary>设置 LiteFileInfo`1.set_MimeType(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.OpenRead">
            <summary>设置 LiteFileInfo`1.OpenRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.OpenWrite">
            <summary>设置 LiteFileInfo`1.OpenWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.SaveAsStringBoolean">
            <summary>设置 LiteFileInfo`1.SaveAs(String filename, Boolean overwritten) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.SetReferenceBsonValueILiteCollectionOfLiteFileInfoOfT0ILiteCollectionOfBsonDocument">
            <summary>设置 LiteFileInfo`1.SetReference(BsonValue fileId, ILiteCollection`1&lt;LiteFileInfo`1&lt;!0&gt;&gt; files, ILiteCollection`1&lt;BsonDocument&gt; chunks) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.UploadDateGet">
            <summary>设置 LiteFileInfo`1.get_UploadDate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileInfo`1.UploadDateSetDateTime">
            <summary>设置 LiteFileInfo`1.set_UploadDate(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteFileStream`1">
            <summary>LiteDB.LiteFileStream`1 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileStream`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileStream`1.#ctor(LiteDB.LiteFileStream{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.CanReadGet">
            <summary>设置 LiteFileStream`1.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.CanSeekGet">
            <summary>设置 LiteFileStream`1.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.CanWriteGet">
            <summary>设置 LiteFileStream`1.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.DisposeBoolean">
            <summary>设置 LiteFileStream`1.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.FileInfoGet">
            <summary>设置 LiteFileStream`1.get_FileInfo() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.Flush">
            <summary>设置 LiteFileStream`1.Flush() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.GetChunkDataInt32">
            <summary>设置 LiteFileStream`1.GetChunkData(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.LengthGet">
            <summary>设置 LiteFileStream`1.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.PositionGet">
            <summary>设置 LiteFileStream`1.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.PositionSetInt64">
            <summary>设置 LiteFileStream`1.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.ReadByteArrayInt32Int32">
            <summary>设置 LiteFileStream`1.Read(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.SeekInt64SeekOrigin">
            <summary>设置 LiteFileStream`1.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.SetLengthInt64">
            <summary>设置 LiteFileStream`1.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.SetReadStreamPositionInt64">
            <summary>设置 LiteFileStream`1.SetReadStreamPosition(Int64 newPosition) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.WriteByteArrayInt32Int32">
            <summary>设置 LiteFileStream`1.Write(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.AllInstances.WriteChunksBoolean">
            <summary>设置 LiteFileStream`1.WriteChunks(Boolean flush) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileStream`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileStream`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteFileStream`1.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.CanReadGet">
            <summary>设置 LiteFileStream`1.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.CanSeekGet">
            <summary>设置 LiteFileStream`1.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.CanWriteGet">
            <summary>设置 LiteFileStream`1.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.ConstructorILiteCollectionOfLiteFileInfoOfT0ILiteCollectionOfBsonDocumentLiteFileInfoOfT0BsonValueFileAccess">
            <summary>设置 LiteFileStream`1.LiteFileStream`1(ILiteCollection`1&lt;LiteFileInfo`1&lt;!0&gt;&gt; files, ILiteCollection`1&lt;BsonDocument&gt; chunks, LiteFileInfo`1&lt;!0&gt; file, BsonValue fileId, FileAccess mode) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.DisposeBoolean">
            <summary>设置 LiteFileStream`1.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.FileInfoGet">
            <summary>设置 LiteFileStream`1.get_FileInfo() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.Flush">
            <summary>设置 LiteFileStream`1.Flush() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.GetChunkDataInt32">
            <summary>设置 LiteFileStream`1.GetChunkData(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.LengthGet">
            <summary>设置 LiteFileStream`1.get_Length() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.PositionGet">
            <summary>设置 LiteFileStream`1.get_Position() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.PositionSetInt64">
            <summary>设置 LiteFileStream`1.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.ReadByteArrayInt32Int32">
            <summary>设置 LiteFileStream`1.Read(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.SeekInt64SeekOrigin">
            <summary>设置 LiteFileStream`1.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.SetLengthInt64">
            <summary>设置 LiteFileStream`1.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.SetReadStreamPositionInt64">
            <summary>设置 LiteFileStream`1.SetReadStreamPosition(Int64 newPosition) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.WriteByteArrayInt32Int32">
            <summary>设置 LiteFileStream`1.Write(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteFileStream`1.WriteChunksBoolean">
            <summary>设置 LiteFileStream`1.WriteChunks(Boolean flush) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteQueryable`1">
            <summary>LiteDB.LiteQueryable`1 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.#ctor(LiteDB.LiteQueryable{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.Count">
            <summary>设置 LiteQueryable`1.Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.ExecuteReader">
            <summary>设置 LiteQueryable`1.ExecuteReader() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.Exists">
            <summary>设置 LiteQueryable`1.Exists() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.First">
            <summary>设置 LiteQueryable`1.First() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.FirstOrDefault">
            <summary>设置 LiteQueryable`1.FirstOrDefault() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.ForUpdate">
            <summary>设置 LiteQueryable`1.ForUpdate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.GetPlan">
            <summary>设置 LiteQueryable`1.GetPlan() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.GroupByBsonExpression">
            <summary>设置 LiteQueryable`1.GroupBy(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.HavingBsonExpression">
            <summary>设置 LiteQueryable`1.Having(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.IncludeBsonExpression">
            <summary>设置 LiteQueryable`1.Include(BsonExpression path) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.IncludeListOfBsonExpression">
            <summary>设置 LiteQueryable`1.Include(List`1&lt;BsonExpression&gt; paths) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.IncludeOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryable{`0}})">
            <summary>设置 LiteQueryable`1.Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; path) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.IntoStringBsonAutoId">
            <summary>设置 LiteQueryable`1.Into(String newCollection, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.LimitInt32">
            <summary>设置 LiteQueryable`1.Limit(Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.LongCount">
            <summary>设置 LiteQueryable`1.LongCount() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.OffsetInt32">
            <summary>设置 LiteQueryable`1.Offset(Int32 offset) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.OrderByBsonExpressionInt32">
            <summary>设置 LiteQueryable`1.OrderBy(BsonExpression keySelector, Int32 order) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.OrderByDescendingBsonExpression">
            <summary>设置 LiteQueryable`1.OrderByDescending(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.OrderByDescendingOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryable{`0}})">
            <summary>设置 LiteQueryable`1.OrderByDescending(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.OrderByOf1ExpressionOfFuncOfT0M0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,LiteDB.ILiteQueryable{`0}})">
            <summary>设置 LiteQueryable`1.OrderBy(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Int32 order) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.SelectBsonExpression">
            <summary>设置 LiteQueryable`1.Select(BsonExpression selector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.SelectOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryableResult{``0}})">
            <summary>设置 LiteQueryable`1.Select(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; selector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.Single">
            <summary>设置 LiteQueryable`1.Single() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.SingleOrDefault">
            <summary>设置 LiteQueryable`1.SingleOrDefault() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.SkipInt32">
            <summary>设置 LiteQueryable`1.Skip(Int32 offset) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.ToArray">
            <summary>设置 LiteQueryable`1.ToArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.ToDocuments">
            <summary>设置 LiteQueryable`1.ToDocuments() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.ToEnumerable">
            <summary>设置 LiteQueryable`1.ToEnumerable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.ToList">
            <summary>设置 LiteQueryable`1.ToList() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.WhereBsonExpression">
            <summary>设置 LiteQueryable`1.Where(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.WhereExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteQueryable`1.Where(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.WhereStringBsonDocument">
            <summary>设置 LiteQueryable`1.Where(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances.WhereStringBsonValueArray">
            <summary>设置 LiteQueryable`1.Where(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances._ToEnumerableb__27_1BsonValue">
            <summary>设置 LiteQueryable`1.&lt;ToEnumerable&gt;b__27_1(BsonValue x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.AllInstances._ToEnumerableb__27_2BsonDocument">
            <summary>设置 LiteQueryable`1.&lt;ToEnumerable&gt;b__27_2(BsonDocument x) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.Bind(LiteDB.ILiteQueryableResult{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.Bind(LiteDB.ILiteQueryable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ConstructorILiteEngineBsonMapperStringQuery">
            <summary>设置 LiteQueryable`1.LiteQueryable`1(ILiteEngine engine, BsonMapper mapper, String collection, Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.Count">
            <summary>设置 LiteQueryable`1.Count() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ExecuteReader">
            <summary>设置 LiteQueryable`1.ExecuteReader() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.Exists">
            <summary>设置 LiteQueryable`1.Exists() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.First">
            <summary>设置 LiteQueryable`1.First() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.FirstOrDefault">
            <summary>设置 LiteQueryable`1.FirstOrDefault() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ForUpdate">
            <summary>设置 LiteQueryable`1.ForUpdate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.GetPlan">
            <summary>设置 LiteQueryable`1.GetPlan() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.GroupByBsonExpression">
            <summary>设置 LiteQueryable`1.GroupBy(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.HavingBsonExpression">
            <summary>设置 LiteQueryable`1.Having(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.IncludeBsonExpression">
            <summary>设置 LiteQueryable`1.Include(BsonExpression path) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.IncludeListOfBsonExpression">
            <summary>设置 LiteQueryable`1.Include(List`1&lt;BsonExpression&gt; paths) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.IncludeOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryable{`0}})">
            <summary>设置 LiteQueryable`1.Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; path) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.IntoStringBsonAutoId">
            <summary>设置 LiteQueryable`1.Into(String newCollection, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.LimitInt32">
            <summary>设置 LiteQueryable`1.Limit(Int32 limit) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.LongCount">
            <summary>设置 LiteQueryable`1.LongCount() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.OffsetInt32">
            <summary>设置 LiteQueryable`1.Offset(Int32 offset) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.OrderByBsonExpressionInt32">
            <summary>设置 LiteQueryable`1.OrderBy(BsonExpression keySelector, Int32 order) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.OrderByDescendingBsonExpression">
            <summary>设置 LiteQueryable`1.OrderByDescending(BsonExpression keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.OrderByDescendingOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryable{`0}})">
            <summary>设置 LiteQueryable`1.OrderByDescending(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.OrderByOf1ExpressionOfFuncOfT0M0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,LiteDB.ILiteQueryable{`0}})">
            <summary>设置 LiteQueryable`1.OrderBy(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Int32 order) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.SelectBsonExpression">
            <summary>设置 LiteQueryable`1.Select(BsonExpression selector) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteQueryable`1.SelectOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryableResult{``0}})">
            <summary>设置 LiteQueryable`1.Select(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; selector) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.Single">
            <summary>设置 LiteQueryable`1.Single() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.SingleOrDefault">
            <summary>设置 LiteQueryable`1.SingleOrDefault() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.SkipInt32">
            <summary>设置 LiteQueryable`1.Skip(Int32 offset) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ToArray">
            <summary>设置 LiteQueryable`1.ToArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ToDocuments">
            <summary>设置 LiteQueryable`1.ToDocuments() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ToEnumerable">
            <summary>设置 LiteQueryable`1.ToEnumerable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.ToList">
            <summary>设置 LiteQueryable`1.ToList() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.WhereBsonExpression">
            <summary>设置 LiteQueryable`1.Where(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.WhereExpressionOfFuncOfT0Boolean">
            <summary>设置 LiteQueryable`1.Where(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.WhereStringBsonDocument">
            <summary>设置 LiteQueryable`1.Where(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1.WhereStringBsonValueArray">
            <summary>设置 LiteQueryable`1.Where(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1._ToEnumerableb__27_1BsonValue">
            <summary>设置 LiteQueryable`1.&lt;ToEnumerable&gt;b__27_1(BsonValue x) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteQueryable`1._ToEnumerableb__27_2BsonDocument">
            <summary>设置 LiteQueryable`1.&lt;ToEnumerable&gt;b__27_2(BsonDocument x) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteRepository">
            <summary>LiteDB.LiteRepository 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.#ctor(LiteDB.LiteRepository)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteRepository.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.AllInstances.DatabaseGet">
            <summary>设置 LiteRepository.get_Database() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.DeleteManyOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.String,System.Int32})">
            <summary>设置 LiteRepository.DeleteMany(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.DeleteManyOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Int32})">
            <summary>设置 LiteRepository.DeleteMany(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.DeleteOf1BsonValueString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonValue,System.String,System.Boolean})">
            <summary>设置 LiteRepository.Delete(BsonValue id, String collectionName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.AllInstances.Dispose">
            <summary>设置 LiteRepository.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.AllInstances.DisposeBoolean">
            <summary>设置 LiteRepository.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.EnsureIndexOf1BsonExpressionBooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(BsonExpression expression, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.EnsureIndexOf1StringBsonExpressionBooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.String,LiteDB.BsonExpression,System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(String name, BsonExpression expression, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.EnsureIndexOf2ExpressionOfFuncOfM0M1BooleanString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.EnsureIndexOf2StringExpressionOfFuncOfM0M1BooleanString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(String name, Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.FetchOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.String,System.Collections.Generic.List{``0}})">
            <summary>设置 LiteRepository.Fetch(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.FetchOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Collections.Generic.List{``0}})">
            <summary>设置 LiteRepository.Fetch(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.FirstOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.First(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.FirstOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.First(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.FirstOrDefaultOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.FirstOrDefault(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.FirstOrDefaultOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.FirstOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.InsertOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 LiteRepository.Insert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.InsertOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,``0,System.String,LiteDB.BsonValue})">
            <summary>设置 LiteRepository.Insert(!!0 entity, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.QueryOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.String,LiteDB.ILiteQueryable{``0}})">
            <summary>设置 LiteRepository.Query(String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.SingleByIdOf1BsonValueString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonValue,System.String,``0})">
            <summary>设置 LiteRepository.SingleById(BsonValue id, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.SingleOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.Single(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.SingleOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.Single(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.SingleOrDefaultOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.SingleOrDefault(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.SingleOrDefaultOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.SingleOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.UpdateOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 LiteRepository.Update(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.UpdateOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,``0,System.String,System.Boolean})">
            <summary>设置 LiteRepository.Update(!!0 entity, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.UpsertOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 LiteRepository.Upsert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.AllInstances.UpsertOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.LiteRepository,``0,System.String,System.Boolean})">
            <summary>设置 LiteRepository.Upsert(!!0 entity, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.Bind(LiteDB.ILiteRepository)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.ConstructorConnectionStringBsonMapper">
            <summary>设置 LiteRepository.LiteRepository(ConnectionString connectionString, BsonMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.ConstructorILiteDatabase">
            <summary>设置 LiteRepository.LiteRepository(ILiteDatabase database) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.ConstructorStreamBsonMapperStream">
            <summary>设置 LiteRepository.LiteRepository(Stream stream, BsonMapper mapper, Stream logStream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.ConstructorStringBsonMapper">
            <summary>设置 LiteRepository.LiteRepository(String connectionString, BsonMapper mapper) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.DatabaseGet">
            <summary>设置 LiteRepository.get_Database() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.DeleteManyOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,System.Int32})">
            <summary>设置 LiteRepository.DeleteMany(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.DeleteManyOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Int32})">
            <summary>设置 LiteRepository.DeleteMany(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.DeleteOf1BsonValueString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonValue,System.String,System.Boolean})">
            <summary>设置 LiteRepository.Delete(BsonValue id, String collectionName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.Dispose">
            <summary>设置 LiteRepository.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteRepository.DisposeBoolean">
            <summary>设置 LiteRepository.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.EnsureIndexOf1BsonExpressionBooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(BsonExpression expression, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.EnsureIndexOf1StringBsonExpressionBooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,LiteDB.BsonExpression,System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(String name, BsonExpression expression, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.EnsureIndexOf2ExpressionOfFuncOfM0M1BooleanString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.EnsureIndexOf2StringExpressionOfFuncOfM0M1BooleanString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String,System.Boolean})">
            <summary>设置 LiteRepository.EnsureIndex(String name, Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.FetchOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,System.Collections.Generic.List{``0}})">
            <summary>设置 LiteRepository.Fetch(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.FetchOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Collections.Generic.List{``0}})">
            <summary>设置 LiteRepository.Fetch(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.FirstOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.First(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.FirstOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.First(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.FirstOrDefaultOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.FirstOrDefault(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.FirstOrDefaultOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.FirstOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.InsertOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 LiteRepository.Insert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.InsertOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,LiteDB.BsonValue})">
            <summary>设置 LiteRepository.Insert(!!0 entity, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.QueryOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,LiteDB.ILiteQueryable{``0}})">
            <summary>设置 LiteRepository.Query(String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.SingleByIdOf1BsonValueString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonValue,System.String,``0})">
            <summary>设置 LiteRepository.SingleById(BsonValue id, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.SingleOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.Single(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.SingleOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.Single(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.SingleOrDefaultOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 LiteRepository.SingleOrDefault(BsonExpression predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.SingleOrDefaultOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 LiteRepository.SingleOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.UpdateOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 LiteRepository.Update(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.UpdateOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,System.Boolean})">
            <summary>设置 LiteRepository.Update(!!0 entity, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.UpsertOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 LiteRepository.Upsert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteRepository.UpsertOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,System.Boolean})">
            <summary>设置 LiteRepository.Upsert(!!0 entity, String collectionName) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteStorage`1">
            <summary>LiteDB.LiteStorage`1 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteStorage`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteStorage`1.#ctor(LiteDB.LiteStorage{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimLiteStorage`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.DeleteT0">
            <summary>设置 LiteStorage`1.Delete(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.DownloadT0Stream">
            <summary>设置 LiteStorage`1.Download(!0 id, Stream stream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.DownloadT0StringBoolean">
            <summary>设置 LiteStorage`1.Download(!0 id, String filename, Boolean overwritten) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.ExistsT0">
            <summary>设置 LiteStorage`1.Exists(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.FindAll">
            <summary>设置 LiteStorage`1.FindAll() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.FindBsonExpression">
            <summary>设置 LiteStorage`1.Find(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.FindByIdT0">
            <summary>设置 LiteStorage`1.FindById(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.FindExpressionOfFuncOfLiteFileInfoOfT0Boolean">
            <summary>设置 LiteStorage`1.Find(Expression`1&lt;Func`2&lt;LiteFileInfo`1&lt;!0&gt;,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.FindStringBsonDocument">
            <summary>设置 LiteStorage`1.Find(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.FindStringBsonValueArray">
            <summary>设置 LiteStorage`1.Find(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.OpenReadT0">
            <summary>设置 LiteStorage`1.OpenRead(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.OpenWriteT0StringBsonDocument">
            <summary>设置 LiteStorage`1.OpenWrite(!0 id, String filename, BsonDocument metadata) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.SetMetadataT0BsonDocument">
            <summary>设置 LiteStorage`1.SetMetadata(!0 id, BsonDocument metadata) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.UploadT0String">
            <summary>设置 LiteStorage`1.Upload(!0 id, String filename) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.AllInstances.UploadT0StringStreamBsonDocument">
            <summary>设置 LiteStorage`1.Upload(!0 id, String filename, Stream stream, BsonDocument metadata) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteStorage`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteStorage`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimLiteStorage`1.Bind(LiteDB.ILiteStorage{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.ConstructorILiteDatabaseStringString">
            <summary>设置 LiteStorage`1.LiteStorage`1(ILiteDatabase db, String filesCollection, String chunksCollection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.DeleteT0">
            <summary>设置 LiteStorage`1.Delete(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.DownloadT0Stream">
            <summary>设置 LiteStorage`1.Download(!0 id, Stream stream) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.DownloadT0StringBoolean">
            <summary>设置 LiteStorage`1.Download(!0 id, String filename, Boolean overwritten) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.ExistsT0">
            <summary>设置 LiteStorage`1.Exists(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.FindAll">
            <summary>设置 LiteStorage`1.FindAll() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.FindBsonExpression">
            <summary>设置 LiteStorage`1.Find(BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.FindByIdT0">
            <summary>设置 LiteStorage`1.FindById(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.FindExpressionOfFuncOfLiteFileInfoOfT0Boolean">
            <summary>设置 LiteStorage`1.Find(Expression`1&lt;Func`2&lt;LiteFileInfo`1&lt;!0&gt;,Boolean&gt;&gt; predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.FindStringBsonDocument">
            <summary>设置 LiteStorage`1.Find(String predicate, BsonDocument parameters) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.FindStringBsonValueArray">
            <summary>设置 LiteStorage`1.Find(String predicate, BsonValue[] args) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.OpenReadT0">
            <summary>设置 LiteStorage`1.OpenRead(!0 id) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.OpenWriteT0StringBsonDocument">
            <summary>设置 LiteStorage`1.OpenWrite(!0 id, String filename, BsonDocument metadata) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.SetMetadataT0BsonDocument">
            <summary>设置 LiteStorage`1.SetMetadata(!0 id, BsonDocument metadata) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.UploadT0String">
            <summary>设置 LiteStorage`1.Upload(!0 id, String filename) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimLiteStorage`1.UploadT0StringStreamBsonDocument">
            <summary>设置 LiteStorage`1.Upload(!0 id, String filename, Stream stream, BsonDocument metadata) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimMemberMapper">
            <summary>LiteDB.MemberMapper 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimMemberMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimMemberMapper.#ctor(LiteDB.MemberMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimMemberMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.AutoIdGet">
            <summary>设置 MemberMapper.get_AutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.AutoIdSetBoolean">
            <summary>设置 MemberMapper.set_AutoId(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.DataTypeGet">
            <summary>设置 MemberMapper.get_DataType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.DataTypeSetType">
            <summary>设置 MemberMapper.set_DataType(Type value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.DeserializeGet">
            <summary>设置 MemberMapper.get_Deserialize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.DeserializeSetFuncOfBsonValueBsonMapperObject">
            <summary>设置 MemberMapper.set_Deserialize(Func`3&lt;BsonValue,BsonMapper,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.FieldNameGet">
            <summary>设置 MemberMapper.get_FieldName() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.FieldNameSetString">
            <summary>设置 MemberMapper.set_FieldName(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.GetterGet">
            <summary>设置 MemberMapper.get_Getter() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.GetterSetGenericGetter">
            <summary>设置 MemberMapper.set_Getter(GenericGetter value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.IsDbRefGet">
            <summary>设置 MemberMapper.get_IsDbRef() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.IsDbRefSetBoolean">
            <summary>设置 MemberMapper.set_IsDbRef(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.IsEnumerableGet">
            <summary>设置 MemberMapper.get_IsEnumerable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.IsEnumerableSetBoolean">
            <summary>设置 MemberMapper.set_IsEnumerable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.MemberNameGet">
            <summary>设置 MemberMapper.get_MemberName() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.MemberNameSetString">
            <summary>设置 MemberMapper.set_MemberName(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.SerializeGet">
            <summary>设置 MemberMapper.get_Serialize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.SerializeSetFuncOfObjectBsonMapperBsonValue">
            <summary>设置 MemberMapper.set_Serialize(Func`3&lt;Object,BsonMapper,BsonValue&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.SetterGet">
            <summary>设置 MemberMapper.get_Setter() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.SetterSetGenericSetter">
            <summary>设置 MemberMapper.set_Setter(GenericSetter value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.UnderlyingTypeGet">
            <summary>设置 MemberMapper.get_UnderlyingType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AllInstances.UnderlyingTypeSetType">
            <summary>设置 MemberMapper.set_UnderlyingType(Type value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AutoIdGet">
            <summary>设置 MemberMapper.get_AutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.AutoIdSetBoolean">
            <summary>设置 MemberMapper.set_AutoId(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimMemberMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimMemberMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.Constructor">
            <summary>设置 MemberMapper.MemberMapper() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.DataTypeGet">
            <summary>设置 MemberMapper.get_DataType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.DataTypeSetType">
            <summary>设置 MemberMapper.set_DataType(Type value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.DeserializeGet">
            <summary>设置 MemberMapper.get_Deserialize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.DeserializeSetFuncOfBsonValueBsonMapperObject">
            <summary>设置 MemberMapper.set_Deserialize(Func`3&lt;BsonValue,BsonMapper,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.FieldNameGet">
            <summary>设置 MemberMapper.get_FieldName() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.FieldNameSetString">
            <summary>设置 MemberMapper.set_FieldName(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.GetterGet">
            <summary>设置 MemberMapper.get_Getter() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.GetterSetGenericGetter">
            <summary>设置 MemberMapper.set_Getter(GenericGetter value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.IsDbRefGet">
            <summary>设置 MemberMapper.get_IsDbRef() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.IsDbRefSetBoolean">
            <summary>设置 MemberMapper.set_IsDbRef(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.IsEnumerableGet">
            <summary>设置 MemberMapper.get_IsEnumerable() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.IsEnumerableSetBoolean">
            <summary>设置 MemberMapper.set_IsEnumerable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.MemberNameGet">
            <summary>设置 MemberMapper.get_MemberName() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.MemberNameSetString">
            <summary>设置 MemberMapper.set_MemberName(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.SerializeGet">
            <summary>设置 MemberMapper.get_Serialize() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.SerializeSetFuncOfObjectBsonMapperBsonValue">
            <summary>设置 MemberMapper.set_Serialize(Func`3&lt;Object,BsonMapper,BsonValue&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.SetterGet">
            <summary>设置 MemberMapper.get_Setter() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.SetterSetGenericSetter">
            <summary>设置 MemberMapper.set_Setter(GenericSetter value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.UnderlyingTypeGet">
            <summary>设置 MemberMapper.get_UnderlyingType() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimMemberMapper.UnderlyingTypeSetType">
            <summary>设置 MemberMapper.set_UnderlyingType(Type value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimObjectId">
            <summary>LiteDB.ObjectId 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimObjectId.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimObjectId.#ctor(LiteDB.ObjectId)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimObjectId.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.CompareToObjectId">
            <summary>设置 ObjectId.CompareTo(ObjectId other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.CreationTimeGet">
            <summary>设置 ObjectId.get_CreationTime() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.EqualsObject">
            <summary>设置 ObjectId.Equals(Object other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.EqualsObjectId">
            <summary>设置 ObjectId.Equals(ObjectId other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.GetHashCode01">
            <summary>设置 ObjectId.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.IncrementGet">
            <summary>设置 ObjectId.get_Increment() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.MachineGet">
            <summary>设置 ObjectId.get_Machine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.PidGet">
            <summary>设置 ObjectId.get_Pid() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.TimestampGet">
            <summary>设置 ObjectId.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.ToByteArray">
            <summary>设置 ObjectId.ToByteArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.ToByteArrayByteArrayInt32">
            <summary>设置 ObjectId.ToByteArray(Byte[] bytes, Int32 startIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.AllInstances.ToString01">
            <summary>设置 ObjectId.ToString() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimObjectId.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimObjectId.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimObjectId.Bind(System.IComparable{LiteDB.ObjectId})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimObjectId.Bind(System.IEquatable{LiteDB.ObjectId})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.CompareToObjectId">
            <summary>设置 ObjectId.CompareTo(ObjectId other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.Constructor">
            <summary>设置 ObjectId.ObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ConstructorByteArrayInt32">
            <summary>设置 ObjectId.ObjectId(Byte[] bytes, Int32 startIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ConstructorInt32Int32Int16Int32">
            <summary>设置 ObjectId.ObjectId(Int32 timestamp, Int32 machine, Int16 pid, Int32 increment) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ConstructorObjectId">
            <summary>设置 ObjectId.ObjectId(ObjectId from) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ConstructorString">
            <summary>设置 ObjectId.ObjectId(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.CreationTimeGet">
            <summary>设置 ObjectId.get_CreationTime() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.EmptyGet">
            <summary>设置 ObjectId.get_Empty() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.EqualityOpObjectIdObjectId">
            <summary>设置 ObjectId.op_Equality(ObjectId lhs, ObjectId rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.EqualsObject">
            <summary>设置 ObjectId.Equals(Object other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.EqualsObjectId">
            <summary>设置 ObjectId.Equals(ObjectId other) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.FromHexString">
            <summary>设置 ObjectId.FromHex(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.GetCurrentProcessId">
            <summary>设置 ObjectId.GetCurrentProcessId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.GetHashCode">
            <summary>设置 ObjectId.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.GetMachineHash">
            <summary>设置 ObjectId.GetMachineHash() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.GreaterThanOpObjectIdObjectId">
            <summary>设置 ObjectId.op_GreaterThan(ObjectId lhs, ObjectId rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.GreaterThanOrEqualOpObjectIdObjectId">
            <summary>设置 ObjectId.op_GreaterThanOrEqual(ObjectId lhs, ObjectId rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.IncrementGet">
            <summary>设置 ObjectId.get_Increment() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.InequalityOpObjectIdObjectId">
            <summary>设置 ObjectId.op_Inequality(ObjectId lhs, ObjectId rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.LessThanOpObjectIdObjectId">
            <summary>设置 ObjectId.op_LessThan(ObjectId lhs, ObjectId rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.LessThanOrEqualOpObjectIdObjectId">
            <summary>设置 ObjectId.op_LessThanOrEqual(ObjectId lhs, ObjectId rhs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.MachineGet">
            <summary>设置 ObjectId.get_Machine() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.NewObjectId">
            <summary>设置 ObjectId.NewObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.PidGet">
            <summary>设置 ObjectId.get_Pid() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.StaticConstructor">
            <summary>设置 ObjectId.ObjectId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.TimestampGet">
            <summary>设置 ObjectId.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ToByteArray">
            <summary>设置 ObjectId.ToByteArray() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ToByteArrayByteArrayInt32">
            <summary>设置 ObjectId.ToByteArray(Byte[] bytes, Int32 startIndex) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimObjectId.ToString">
            <summary>设置 ObjectId.ToString() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimQuery">
            <summary>LiteDB.Query 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQuery.#ctor(LiteDB.Query)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.All">
            <summary>设置 Query.All() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.ExplainPlanGet">
            <summary>设置 Query.get_ExplainPlan() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.ExplainPlanSetBoolean">
            <summary>设置 Query.set_ExplainPlan(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.ForUpdateGet">
            <summary>设置 Query.get_ForUpdate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.ForUpdateSetBoolean">
            <summary>设置 Query.set_ForUpdate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.GroupByGet">
            <summary>设置 Query.get_GroupBy() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.GroupBySetBsonExpression">
            <summary>设置 Query.set_GroupBy(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.HavingGet">
            <summary>设置 Query.get_Having() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.HavingSetBsonExpression">
            <summary>设置 Query.set_Having(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.IncludesGet">
            <summary>设置 Query.get_Includes() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.IntoAutoIdGet">
            <summary>设置 Query.get_IntoAutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.IntoAutoIdSetBsonAutoId">
            <summary>设置 Query.set_IntoAutoId(BsonAutoId value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.IntoGet">
            <summary>设置 Query.get_Into() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.IntoSetString">
            <summary>设置 Query.set_Into(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.LimitGet">
            <summary>设置 Query.get_Limit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.LimitSetInt32">
            <summary>设置 Query.set_Limit(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.OffsetGet">
            <summary>设置 Query.get_Offset() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.OffsetSetInt32">
            <summary>设置 Query.set_Offset(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.OrderByGet">
            <summary>设置 Query.get_OrderBy() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.OrderBySetBsonExpression">
            <summary>设置 Query.set_OrderBy(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.OrderGet">
            <summary>设置 Query.get_Order() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.OrderSetInt32">
            <summary>设置 Query.set_Order(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.SelectGet">
            <summary>设置 Query.get_Select() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.SelectSetBsonExpression">
            <summary>设置 Query.set_Select(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.ToSQLString">
            <summary>设置 Query.ToSQL(String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInstances.WhereGet">
            <summary>设置 Query.get_Where() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllInt32">
            <summary>设置 Query.All(Int32 order) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AllStringInt32">
            <summary>设置 Query.All(String field, Int32 order) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AndBsonExpressionArray">
            <summary>设置 Query.And(BsonExpression[] queries) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.AndBsonExpressionBsonExpression">
            <summary>设置 Query.And(BsonExpression left, BsonExpression right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.Any">
            <summary>设置 Query.Any() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.BetweenStringBsonValueBsonValue">
            <summary>设置 Query.Between(String field, BsonValue start, BsonValue end) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.Constructor">
            <summary>设置 Query.Query() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.ContainsStringString">
            <summary>设置 Query.Contains(String field, String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.EQStringBsonValue">
            <summary>设置 Query.EQ(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.ExplainPlanGet">
            <summary>设置 Query.get_ExplainPlan() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.ExplainPlanSetBoolean">
            <summary>设置 Query.set_ExplainPlan(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.ForUpdateGet">
            <summary>设置 Query.get_ForUpdate() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.ForUpdateSetBoolean">
            <summary>设置 Query.set_ForUpdate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.GTEStringBsonValue">
            <summary>设置 Query.GTE(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.GTStringBsonValue">
            <summary>设置 Query.GT(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.GroupByGet">
            <summary>设置 Query.get_GroupBy() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.GroupBySetBsonExpression">
            <summary>设置 Query.set_GroupBy(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.HavingGet">
            <summary>设置 Query.get_Having() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.HavingSetBsonExpression">
            <summary>设置 Query.set_Having(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.InStringBsonArray">
            <summary>设置 Query.In(String field, BsonArray value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.InStringBsonValueArray">
            <summary>设置 Query.In(String field, BsonValue[] values) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.InStringIEnumerableOfBsonValue">
            <summary>设置 Query.In(String field, IEnumerable`1&lt;BsonValue&gt; values) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.IncludesGet">
            <summary>设置 Query.get_Includes() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.IntoAutoIdGet">
            <summary>设置 Query.get_IntoAutoId() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.IntoAutoIdSetBsonAutoId">
            <summary>设置 Query.set_IntoAutoId(BsonAutoId value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.IntoGet">
            <summary>设置 Query.get_Into() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.IntoSetString">
            <summary>设置 Query.set_Into(String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.LTEStringBsonValue">
            <summary>设置 Query.LTE(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.LTStringBsonValue">
            <summary>设置 Query.LT(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.LimitGet">
            <summary>设置 Query.get_Limit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.LimitSetInt32">
            <summary>设置 Query.set_Limit(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.NotStringBsonValue">
            <summary>设置 Query.Not(String field, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OffsetGet">
            <summary>设置 Query.get_Offset() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OffsetSetInt32">
            <summary>设置 Query.set_Offset(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OrBsonExpressionArray">
            <summary>设置 Query.Or(BsonExpression[] queries) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OrBsonExpressionBsonExpression">
            <summary>设置 Query.Or(BsonExpression left, BsonExpression right) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OrderByGet">
            <summary>设置 Query.get_OrderBy() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OrderBySetBsonExpression">
            <summary>设置 Query.set_OrderBy(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OrderGet">
            <summary>设置 Query.get_Order() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.OrderSetInt32">
            <summary>设置 Query.set_Order(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.SelectGet">
            <summary>设置 Query.get_Select() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.SelectSetBsonExpression">
            <summary>设置 Query.set_Select(BsonExpression value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.StartsWithStringString">
            <summary>设置 Query.StartsWith(String field, String value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.ToSQLString">
            <summary>设置 Query.ToSQL(String collection) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQuery.WhereGet">
            <summary>设置 Query.get_Where() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimQueryAny">
            <summary>LiteDB.QueryAny 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQueryAny.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQueryAny.#ctor(LiteDB.QueryAny)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimQueryAny.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.BetweenStringBsonValueBsonValue">
            <summary>设置 QueryAny.Between(String arrayField, BsonValue start, BsonValue end) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.EQStringBsonValue">
            <summary>设置 QueryAny.EQ(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.GTEStringBsonValue">
            <summary>设置 QueryAny.GTE(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.GTStringBsonValue">
            <summary>设置 QueryAny.GT(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.LTEStringBsonValue">
            <summary>设置 QueryAny.LTE(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.LTStringBsonValue">
            <summary>设置 QueryAny.LT(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.NotStringBsonValue">
            <summary>设置 QueryAny.Not(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.AllInstances.StartsWithStringString">
            <summary>设置 QueryAny.StartsWith(String arrayField, String value) 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQueryAny.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimQueryAny.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.BetweenStringBsonValueBsonValue">
            <summary>设置 QueryAny.Between(String arrayField, BsonValue start, BsonValue end) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.Constructor">
            <summary>设置 QueryAny.QueryAny() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.EQStringBsonValue">
            <summary>设置 QueryAny.EQ(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.GTEStringBsonValue">
            <summary>设置 QueryAny.GTE(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.GTStringBsonValue">
            <summary>设置 QueryAny.GT(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.LTEStringBsonValue">
            <summary>设置 QueryAny.LTE(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.LTStringBsonValue">
            <summary>设置 QueryAny.LT(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.NotStringBsonValue">
            <summary>设置 QueryAny.Not(String arrayField, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimQueryAny.StartsWithStringString">
            <summary>设置 QueryAny.StartsWith(String arrayField, String value) 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimSharedDataReader">
            <summary>LiteDB.SharedDataReader 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedDataReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedDataReader.#ctor(LiteDB.SharedDataReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimSharedDataReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.CollectionGet">
            <summary>设置 SharedDataReader.get_Collection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.CurrentGet">
            <summary>设置 SharedDataReader.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.Dispose">
            <summary>设置 SharedDataReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.DisposeBoolean">
            <summary>设置 SharedDataReader.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.HasValuesGet">
            <summary>设置 SharedDataReader.get_HasValues() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.ItemGetString">
            <summary>设置 SharedDataReader.get_Item(String field) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.AllInstances.Read">
            <summary>设置 SharedDataReader.Read() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedDataReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedDataReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedDataReader.Bind(LiteDB.IBsonDataReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedDataReader.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.CollectionGet">
            <summary>设置 SharedDataReader.get_Collection() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.ConstructorIBsonDataReaderAction">
            <summary>设置 SharedDataReader.SharedDataReader(IBsonDataReader reader, Action dispose) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.CurrentGet">
            <summary>设置 SharedDataReader.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.Dispose">
            <summary>设置 SharedDataReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.DisposeBoolean">
            <summary>设置 SharedDataReader.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.HasValuesGet">
            <summary>设置 SharedDataReader.get_HasValues() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.ItemGetString">
            <summary>设置 SharedDataReader.get_Item(String field) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedDataReader.Read">
            <summary>设置 SharedDataReader.Read() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimSharedEngine">
            <summary>LiteDB.SharedEngine 的填充码类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedEngine.#ctor(LiteDB.SharedEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.ShimSharedEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.BeginTrans">
            <summary>设置 SharedEngine.BeginTrans() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.Checkpoint">
            <summary>设置 SharedEngine.Checkpoint() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.CloseDatabase">
            <summary>设置 SharedEngine.CloseDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.Commit">
            <summary>设置 SharedEngine.Commit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.DeleteManyStringBsonExpression">
            <summary>设置 SharedEngine.DeleteMany(String collection, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.DeleteStringIEnumerableOfBsonValue">
            <summary>设置 SharedEngine.Delete(String collection, IEnumerable`1&lt;BsonValue&gt; ids) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.Dispose">
            <summary>设置 SharedEngine.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.DisposeBoolean">
            <summary>设置 SharedEngine.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.DropCollectionString">
            <summary>设置 SharedEngine.DropCollection(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.DropIndexStringString">
            <summary>设置 SharedEngine.DropIndex(String collection, String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.EnsureIndexStringStringBsonExpressionBoolean">
            <summary>设置 SharedEngine.EnsureIndex(String collection, String name, BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.InsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 SharedEngine.Insert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.OpenDatabase">
            <summary>设置 SharedEngine.OpenDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.PragmaString">
            <summary>设置 SharedEngine.Pragma(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.PragmaStringBsonValue">
            <summary>设置 SharedEngine.Pragma(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.QueryStringQuery">
            <summary>设置 SharedEngine.Query(String collection, Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.RebuildRebuildOptions">
            <summary>设置 SharedEngine.Rebuild(RebuildOptions options) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.RenameCollectionStringString">
            <summary>设置 SharedEngine.RenameCollection(String name, String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.Rollback">
            <summary>设置 SharedEngine.Rollback() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.UpdateManyStringBsonExpressionBsonExpression">
            <summary>设置 SharedEngine.UpdateMany(String collection, BsonExpression extend, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.UpdateStringIEnumerableOfBsonDocument">
            <summary>设置 SharedEngine.Update(String collection, IEnumerable`1&lt;BsonDocument&gt; docs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances.UpsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 SharedEngine.Upsert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.AllInstances._Queryb__10_0">
            <summary>设置 SharedEngine.&lt;Query&gt;b__10_0() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.BeginTrans">
            <summary>设置 SharedEngine.BeginTrans() 的 填充码</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedEngine.Bind(LiteDB.Engine.ILiteEngine)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LiteDB.Fakes.ShimSharedEngine.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.Checkpoint">
            <summary>设置 SharedEngine.Checkpoint() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.CloseDatabase">
            <summary>设置 SharedEngine.CloseDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.Commit">
            <summary>设置 SharedEngine.Commit() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.ConstructorEngineSettings">
            <summary>设置 SharedEngine.SharedEngine(EngineSettings settings) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.DeleteManyStringBsonExpression">
            <summary>设置 SharedEngine.DeleteMany(String collection, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.DeleteStringIEnumerableOfBsonValue">
            <summary>设置 SharedEngine.Delete(String collection, IEnumerable`1&lt;BsonValue&gt; ids) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.Dispose">
            <summary>设置 SharedEngine.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.DisposeBoolean">
            <summary>设置 SharedEngine.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.DropCollectionString">
            <summary>设置 SharedEngine.DropCollection(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.DropIndexStringString">
            <summary>设置 SharedEngine.DropIndex(String collection, String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.EnsureIndexStringStringBsonExpressionBoolean">
            <summary>设置 SharedEngine.EnsureIndex(String collection, String name, BsonExpression expression, Boolean unique) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.InsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 SharedEngine.Insert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.OpenDatabase">
            <summary>设置 SharedEngine.OpenDatabase() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.PragmaString">
            <summary>设置 SharedEngine.Pragma(String name) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.PragmaStringBsonValue">
            <summary>设置 SharedEngine.Pragma(String name, BsonValue value) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.QueryStringQuery">
            <summary>设置 SharedEngine.Query(String collection, Query query) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.RebuildRebuildOptions">
            <summary>设置 SharedEngine.Rebuild(RebuildOptions options) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.RenameCollectionStringString">
            <summary>设置 SharedEngine.RenameCollection(String name, String newName) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.Rollback">
            <summary>设置 SharedEngine.Rollback() 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.UpdateManyStringBsonExpressionBsonExpression">
            <summary>设置 SharedEngine.UpdateMany(String collection, BsonExpression extend, BsonExpression predicate) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.UpdateStringIEnumerableOfBsonDocument">
            <summary>设置 SharedEngine.Update(String collection, IEnumerable`1&lt;BsonDocument&gt; docs) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine.UpsertStringIEnumerableOfBsonDocumentBsonAutoId">
            <summary>设置 SharedEngine.Upsert(String collection, IEnumerable`1&lt;BsonDocument&gt; docs, BsonAutoId autoId) 的 填充码</summary>
        </member>
        <member name="P:LiteDB.Fakes.ShimSharedEngine._Queryb__10_0">
            <summary>设置 SharedEngine.&lt;Query&gt;b__10_0() 的 填充码</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonArray">
            <summary>LiteDB.BsonArray 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.#ctor(System.Collections.Generic.IEnumerable{LiteDB.BsonValue})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.#ctor(System.Collections.Generic.List{LiteDB.BsonValue})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.#ctor(LiteDB.BsonValue[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonArray.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.CompareTo(LiteDB.BsonValue)">
            <summary>设置 BsonArray.CompareTo(BsonValue other) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.CompareTo(LiteDB.BsonValue,LiteDB.Collation)">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.CompareToBsonValue">
            <summary>设置 BsonArray.CompareTo(BsonValue other) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.CompareToBsonValueCollation">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.Equals(System.Object)">
            <summary>设置 BsonValue.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.EqualsObject">
            <summary>设置 BsonValue.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.GetHashCode">
            <summary>设置 BsonValue.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.GetHashCode01">
            <summary>设置 BsonValue.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.InitializeStub">
            <summary>初始化 type StubBsonArray 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonArray.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonArray.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonArray.Item(System.Int32)">
            <summary>设置 BsonArray.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonArray.Item(System.String)">
            <summary>设置 BsonValue.get_Item(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.ItemGetInt32">
            <summary>设置 BsonArray.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.ItemGetString">
            <summary>设置 BsonValue.get_Item(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.ItemSetInt32BsonValue">
            <summary>设置 BsonArray.set_Item(Int32 index, BsonValue value) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.ItemSetStringBsonValue">
            <summary>设置 BsonValue.set_Item(String name, BsonValue value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonArray.ToString">
            <summary>设置 BsonValue.ToString() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonArray.ToString01">
            <summary>设置 BsonValue.ToString() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonCtorAttribute">
            <summary>LiteDB.BsonCtorAttribute 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonCtorAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonCtorAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonCtorAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonCtorAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonCtorAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonCtorAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonCtorAttribute.InitializeStub">
            <summary>初始化 type StubBsonCtorAttribute 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonCtorAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonCtorAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonCtorAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonCtorAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonCtorAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonCtorAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonCtorAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonCtorAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonDocument">
            <summary>LiteDB.BsonDocument 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.String,LiteDB.BsonValue})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.#ctor(System.Collections.Generic.IDictionary{System.String,LiteDB.BsonValue})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonDocument.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.CompareTo(LiteDB.BsonValue)">
            <summary>设置 BsonDocument.CompareTo(BsonValue other) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.CompareTo(LiteDB.BsonValue,LiteDB.Collation)">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.CompareToBsonValue">
            <summary>设置 BsonDocument.CompareTo(BsonValue other) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.CompareToBsonValueCollation">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.Equals(System.Object)">
            <summary>设置 BsonValue.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.EqualsObject">
            <summary>设置 BsonValue.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.GetHashCode">
            <summary>设置 BsonValue.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.GetHashCode01">
            <summary>设置 BsonValue.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.InitializeStub">
            <summary>初始化 type StubBsonDocument 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonDocument.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonDocument.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonDocument.Item(System.Int32)">
            <summary>设置 BsonValue.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonDocument.Item(System.String)">
            <summary>设置 BsonDocument.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.ItemGetInt32">
            <summary>设置 BsonValue.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.ItemGetString">
            <summary>设置 BsonDocument.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.ItemSetInt32BsonValue">
            <summary>设置 BsonValue.set_Item(Int32 index, BsonValue value) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.ItemSetStringBsonValue">
            <summary>设置 BsonDocument.set_Item(String key, BsonValue value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonDocument.ToString">
            <summary>设置 BsonValue.ToString() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonDocument.ToString01">
            <summary>设置 BsonValue.ToString() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonFieldAttribute">
            <summary>LiteDB.BsonFieldAttribute 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonFieldAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonFieldAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonFieldAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.InitializeStub">
            <summary>初始化 type StubBsonFieldAttribute 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonFieldAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonFieldAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonFieldAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonFieldAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonFieldAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonFieldAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonFieldAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonIdAttribute">
            <summary>LiteDB.BsonIdAttribute 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.#ctor(System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIdAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIdAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIdAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.InitializeStub">
            <summary>初始化 type StubBsonIdAttribute 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIdAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIdAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIdAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIdAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIdAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIdAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIdAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonIgnoreAttribute">
            <summary>LiteDB.BsonIgnoreAttribute 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIgnoreAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIgnoreAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIgnoreAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIgnoreAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIgnoreAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIgnoreAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIgnoreAttribute.InitializeStub">
            <summary>初始化 type StubBsonIgnoreAttribute 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIgnoreAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIgnoreAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIgnoreAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIgnoreAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonIgnoreAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIgnoreAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonIgnoreAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonIgnoreAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonMapper">
            <summary>LiteDB.BsonMapper 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.#ctor(System.Func{System.Type,System.Object},LiteDB.ITypeNameBinder)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.BuildEntityMapper(System.Type)">
            <summary>设置 BsonMapper.BuildEntityMapper(Type type) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonMapper.BuildEntityMapperType">
            <summary>设置 BsonMapper.BuildEntityMapper(Type type) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.GetIdMember(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>设置 BsonMapper.GetIdMember(IEnumerable`1&lt;MemberInfo&gt; members) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonMapper.GetIdMemberIEnumerableOfMemberInfo">
            <summary>设置 BsonMapper.GetIdMember(IEnumerable`1&lt;MemberInfo&gt; members) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.GetTypeCtor(LiteDB.EntityMapper)">
            <summary>设置 BsonMapper.GetTypeCtor(EntityMapper mapper) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonMapper.GetTypeCtorEntityMapper">
            <summary>设置 BsonMapper.GetTypeCtor(EntityMapper mapper) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.GetTypeMembers(System.Type)">
            <summary>设置 BsonMapper.GetTypeMembers(Type type) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonMapper.GetTypeMembersType">
            <summary>设置 BsonMapper.GetTypeMembers(Type type) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.InitializeStub">
            <summary>初始化 type StubBsonMapper 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.ToDocument``1(``0)">
            <summary>设置 BsonMapper.ToDocument(!!0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.ToDocument(System.Type,System.Object)">
            <summary>设置 BsonMapper.ToDocument(Type type, Object entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.ToDocumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,LiteDB.BsonDocument})">
            <summary>设置 ToDocument(!!0 entity) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonMapper.ToDocumentTypeObject">
            <summary>设置 BsonMapper.ToDocument(Type type, Object entity) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.ToObject``1(LiteDB.BsonDocument)">
            <summary>设置 BsonMapper.ToObject(BsonDocument doc) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.ToObject(System.Type,LiteDB.BsonDocument)">
            <summary>设置 BsonMapper.ToObject(Type type, BsonDocument doc) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonMapper.ToObjectOf1BsonDocument``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonDocument,``0})">
            <summary>设置 ToObject(BsonDocument doc) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonMapper.ToObjectTypeBsonDocument">
            <summary>设置 BsonMapper.ToObject(Type type, BsonDocument doc) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonRefAttribute">
            <summary>LiteDB.BsonRefAttribute 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonRefAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonRefAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonRefAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.InitializeStub">
            <summary>初始化 type StubBsonRefAttribute 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonRefAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonRefAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonRefAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonRefAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonRefAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonRefAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonRefAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonSerializer">
            <summary>LiteDB.BsonSerializer 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonSerializer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonSerializer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonSerializer.InitializeStub">
            <summary>初始化 type StubBsonSerializer 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonSerializer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonSerializer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubBsonValue">
            <summary>LiteDB.BsonValue 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(LiteDB.ObjectId)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.DateTime)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Guid)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Byte[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Decimal)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Double)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(System.Int64)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.#ctor(LiteDB.BsonType,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonValue.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.CompareTo(LiteDB.BsonValue)">
            <summary>设置 BsonValue.CompareTo(BsonValue other) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.CompareTo(LiteDB.BsonValue,LiteDB.Collation)">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.CompareToBsonValue">
            <summary>设置 BsonValue.CompareTo(BsonValue other) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.CompareToBsonValueCollation">
            <summary>设置 BsonValue.CompareTo(BsonValue other, Collation collation) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.Equals(System.Object)">
            <summary>设置 BsonValue.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.EqualsObject">
            <summary>设置 BsonValue.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.GetHashCode">
            <summary>设置 BsonValue.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.GetHashCode01">
            <summary>设置 BsonValue.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.InitializeStub">
            <summary>初始化 type StubBsonValue 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonValue.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonValue.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonValue.Item(System.Int32)">
            <summary>设置 BsonValue.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonValue.Item(System.String)">
            <summary>设置 BsonValue.get_Item(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.ItemGetInt32">
            <summary>设置 BsonValue.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.ItemGetString">
            <summary>设置 BsonValue.get_Item(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.ItemSetInt32BsonValue">
            <summary>设置 BsonValue.set_Item(Int32 index, BsonValue value) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.ItemSetStringBsonValue">
            <summary>设置 BsonValue.set_Item(String name, BsonValue value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubBsonValue.RawValue">
            <summary>设置 BsonValue.get_RawValue() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.RawValueGet">
            <summary>设置 BsonValue.get_RawValue() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubBsonValue.ToString">
            <summary>设置 BsonValue.ToString() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubBsonValue.ToString01">
            <summary>设置 BsonValue.ToString() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubCollation">
            <summary>LiteDB.Collation 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubCollation.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubCollation.#ctor(System.Int32,System.Globalization.CompareOptions)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubCollation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubCollation.InitializeStub">
            <summary>初始化 type StubCollation 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubCollation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubCollation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubCollation.ToString">
            <summary>设置 Collation.ToString() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubCollation.ToString01">
            <summary>设置 Collation.ToString() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubConnectionString">
            <summary>LiteDB.ConnectionString 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubConnectionString.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubConnectionString.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubConnectionString.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubConnectionString.InitializeStub">
            <summary>初始化 type StubConnectionString 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubConnectionString.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubConnectionString.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubEntityMapper">
            <summary>LiteDB.EntityMapper 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubEntityMapper.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubEntityMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubEntityMapper.InitializeStub">
            <summary>初始化 type StubEntityMapper 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubEntityMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubEntityMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubIBsonDataReader">
            <summary>LiteDB.IBsonDataReader 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubIBsonDataReader.#ctor">
            <summary>初始化 type StubIBsonDataReader 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubIBsonDataReader.LiteDB#IBsonDataReader#Collection">
            <summary>设置 IBsonDataReader.get_Collection() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubIBsonDataReader.CollectionGet">
            <summary>设置 IBsonDataReader.get_Collection() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubIBsonDataReader.LiteDB#IBsonDataReader#Current">
            <summary>设置 IBsonDataReader.get_Current() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubIBsonDataReader.CurrentGet">
            <summary>设置 IBsonDataReader.get_Current() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubIBsonDataReader.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubIBsonDataReader.LiteDB#IBsonDataReader#HasValues">
            <summary>设置 IBsonDataReader.get_HasValues() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubIBsonDataReader.HasValuesGet">
            <summary>设置 IBsonDataReader.get_HasValues() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubIBsonDataReader.LiteDB#IBsonDataReader#Item(System.String)">
            <summary>设置 IBsonDataReader.get_Item(String field) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubIBsonDataReader.ItemGetString">
            <summary>设置 IBsonDataReader.get_Item(String field) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubIBsonDataReader.LiteDB#IBsonDataReader#Read">
            <summary>设置 IBsonDataReader.Read() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubIBsonDataReader.Read">
            <summary>设置 IBsonDataReader.Read() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubIBsonDataReader.System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubILiteCollection`1">
            <summary>LiteDB.ILiteCollection`1 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.#ctor">
            <summary>初始化 type StubILiteCollection 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#AutoId">
            <summary>设置 ILiteCollection`1.get_AutoId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.AutoIdGet">
            <summary>设置 ILiteCollection`1.get_AutoId() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.Count">
            <summary>设置 ILiteCollection`1.Count() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.CountBsonExpression">
            <summary>设置 ILiteCollection`1.Count(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.CountExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteCollection`1.Count(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.CountQuery">
            <summary>设置 ILiteCollection`1.Count(Query query) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.CountStringBsonDocument">
            <summary>设置 ILiteCollection`1.Count(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.CountStringBsonValueArray">
            <summary>设置 ILiteCollection`1.Count(String predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DeleteAll">
            <summary>设置 ILiteCollection`1.DeleteAll() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DeleteBsonValue">
            <summary>设置 ILiteCollection`1.Delete(BsonValue id) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DeleteManyBsonExpression">
            <summary>设置 ILiteCollection`1.DeleteMany(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DeleteManyExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteCollection`1.DeleteMany(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DeleteManyStringBsonDocument">
            <summary>设置 ILiteCollection`1.DeleteMany(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DeleteManyStringBsonValueArray">
            <summary>设置 ILiteCollection`1.DeleteMany(String predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.DropIndexString">
            <summary>设置 ILiteCollection`1.DropIndex(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.EnsureIndexBsonExpressionBoolean">
            <summary>设置 ILiteCollection`1.EnsureIndex(BsonExpression expression, Boolean unique) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.EnsureIndexOf1ExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Boolean})">
            <summary>设置 EnsureIndex(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.EnsureIndexOf1StringExpressionOfFuncOfT0M0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Boolean})">
            <summary>设置 EnsureIndex(String name, Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.EnsureIndexStringBsonExpressionBoolean">
            <summary>设置 ILiteCollection`1.EnsureIndex(String name, BsonExpression expression, Boolean unique) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#EntityMapper">
            <summary>设置 ILiteCollection`1.get_EntityMapper() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.EntityMapperGet">
            <summary>设置 ILiteCollection`1.get_EntityMapper() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.ExistsBsonExpression">
            <summary>设置 ILiteCollection`1.Exists(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.ExistsExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteCollection`1.Exists(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.ExistsQuery">
            <summary>设置 ILiteCollection`1.Exists(Query query) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.ExistsStringBsonDocument">
            <summary>设置 ILiteCollection`1.Exists(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.ExistsStringBsonValueArray">
            <summary>设置 ILiteCollection`1.Exists(String predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindAll">
            <summary>设置 ILiteCollection`1.FindAll() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindBsonExpressionInt32Int32">
            <summary>设置 ILiteCollection`1.Find(BsonExpression predicate, Int32 skip, Int32 limit) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindByIdBsonValue">
            <summary>设置 ILiteCollection`1.FindById(BsonValue id) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindExpressionOfFuncOfT0BooleanInt32Int32">
            <summary>设置 ILiteCollection`1.Find(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate, Int32 skip, Int32 limit) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindOneBsonExpression">
            <summary>设置 ILiteCollection`1.FindOne(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindOneBsonExpressionBsonValueArray">
            <summary>设置 ILiteCollection`1.FindOne(BsonExpression predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindOneExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteCollection`1.FindOne(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindOneQuery">
            <summary>设置 ILiteCollection`1.FindOne(Query query) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindOneStringBsonDocument">
            <summary>设置 ILiteCollection`1.FindOne(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.FindQueryInt32Int32">
            <summary>设置 ILiteCollection`1.Find(Query query, Int32 skip, Int32 limit) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.IncludeBsonExpression">
            <summary>设置 ILiteCollection`1.Include(BsonExpression keySelector) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.IncludeOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteCollection{`0}})">
            <summary>设置 Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.InsertBsonValueT0">
            <summary>设置 ILiteCollection`1.Insert(BsonValue id, !0 entity) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.InsertBulkIEnumerableOfT0Int32">
            <summary>设置 ILiteCollection`1.InsertBulk(IEnumerable`1&lt;!0&gt; entities, Int32 batchSize) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.InsertIEnumerableOfT0">
            <summary>设置 ILiteCollection`1.Insert(IEnumerable`1&lt;!0&gt; entities) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.InsertT0">
            <summary>设置 ILiteCollection`1.Insert(!0 entity) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Count">
            <summary>设置 ILiteCollection`1.Count() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Count(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.Count(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Count(LiteDB.Query)">
            <summary>设置 ILiteCollection`1.Count(Query query) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteCollection`1.Count(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Count(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteCollection`1.Count(String predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Count(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteCollection`1.Count(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Delete(LiteDB.BsonValue)">
            <summary>设置 ILiteCollection`1.Delete(BsonValue id) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#DeleteAll">
            <summary>设置 ILiteCollection`1.DeleteAll() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#DeleteMany(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.DeleteMany(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#DeleteMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteCollection`1.DeleteMany(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#DeleteMany(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteCollection`1.DeleteMany(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#DeleteMany(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteCollection`1.DeleteMany(String predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#DropIndex(System.String)">
            <summary>设置 ILiteCollection`1.DropIndex(String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#EnsureIndex(LiteDB.BsonExpression,System.Boolean)">
            <summary>设置 ILiteCollection`1.EnsureIndex(BsonExpression expression, Boolean unique) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#EnsureIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>设置 ILiteCollection`1.EnsureIndex(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#EnsureIndex(System.String,LiteDB.BsonExpression,System.Boolean)">
            <summary>设置 ILiteCollection`1.EnsureIndex(String name, BsonExpression expression, Boolean unique) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#EnsureIndex``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>设置 ILiteCollection`1.EnsureIndex(String name, Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Boolean unique) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Exists(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.Exists(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Exists(LiteDB.Query)">
            <summary>设置 ILiteCollection`1.Exists(Query query) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteCollection`1.Exists(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Exists(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteCollection`1.Exists(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Exists(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteCollection`1.Exists(String predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Find(LiteDB.BsonExpression,System.Int32,System.Int32)">
            <summary>设置 ILiteCollection`1.Find(BsonExpression predicate, Int32 skip, Int32 limit) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Find(LiteDB.Query,System.Int32,System.Int32)">
            <summary>设置 ILiteCollection`1.Find(Query query, Int32 skip, Int32 limit) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>设置 ILiteCollection`1.Find(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate, Int32 skip, Int32 limit) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindAll">
            <summary>设置 ILiteCollection`1.FindAll() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindById(LiteDB.BsonValue)">
            <summary>设置 ILiteCollection`1.FindById(BsonValue id) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindOne(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.FindOne(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindOne(LiteDB.Query)">
            <summary>设置 ILiteCollection`1.FindOne(Query query) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteCollection`1.FindOne(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindOne(LiteDB.BsonExpression,LiteDB.BsonValue[])">
            <summary>设置 ILiteCollection`1.FindOne(BsonExpression predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#FindOne(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteCollection`1.FindOne(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Include(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.Include(BsonExpression keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>设置 ILiteCollection`1.Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Insert(`0)">
            <summary>设置 ILiteCollection`1.Insert(!0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>设置 ILiteCollection`1.Insert(IEnumerable`1&lt;!0&gt; entities) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Insert(LiteDB.BsonValue,`0)">
            <summary>设置 ILiteCollection`1.Insert(BsonValue id, !0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#InsertBulk(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>设置 ILiteCollection`1.InsertBulk(IEnumerable`1&lt;!0&gt; entities, Int32 batchSize) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#LongCount">
            <summary>设置 ILiteCollection`1.LongCount() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#LongCount(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.LongCount(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#LongCount(LiteDB.Query)">
            <summary>设置 ILiteCollection`1.LongCount(Query query) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteCollection`1.LongCount(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#LongCount(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteCollection`1.LongCount(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#LongCount(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteCollection`1.LongCount(String predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Max">
            <summary>设置 ILiteCollection`1.Max() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>设置 ILiteCollection`1.Max(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Max(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.Max(BsonExpression keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Min">
            <summary>设置 ILiteCollection`1.Min() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>设置 ILiteCollection`1.Min(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Min(LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.Min(BsonExpression keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Query">
            <summary>设置 ILiteCollection`1.Query() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Update(`0)">
            <summary>设置 ILiteCollection`1.Update(!0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Update(LiteDB.BsonValue,`0)">
            <summary>设置 ILiteCollection`1.Update(BsonValue id, !0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>设置 ILiteCollection`1.Update(IEnumerable`1&lt;!0&gt; entities) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#UpdateMany(LiteDB.BsonExpression,LiteDB.BsonExpression)">
            <summary>设置 ILiteCollection`1.UpdateMany(BsonExpression transform, BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#UpdateMany(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteCollection`1.UpdateMany(Expression`1&lt;Func`2&lt;!0,!0&gt;&gt; extend, Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Upsert(`0)">
            <summary>设置 ILiteCollection`1.Upsert(!0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Upsert(LiteDB.BsonValue,`0)">
            <summary>设置 ILiteCollection`1.Upsert(BsonValue id, !0 entity) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Upsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>设置 ILiteCollection`1.Upsert(IEnumerable`1&lt;!0&gt; entities) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.LongCount">
            <summary>设置 ILiteCollection`1.LongCount() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.LongCountBsonExpression">
            <summary>设置 ILiteCollection`1.LongCount(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.LongCountExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteCollection`1.LongCount(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.LongCountQuery">
            <summary>设置 ILiteCollection`1.LongCount(Query query) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.LongCountStringBsonDocument">
            <summary>设置 ILiteCollection`1.LongCount(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.LongCountStringBsonValueArray">
            <summary>设置 ILiteCollection`1.LongCount(String predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.Max">
            <summary>设置 ILiteCollection`1.Max() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.MaxBsonExpression">
            <summary>设置 ILiteCollection`1.Max(BsonExpression keySelector) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.MaxOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0})">
            <summary>设置 Max(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.Min">
            <summary>设置 ILiteCollection`1.Min() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.MinBsonExpression">
            <summary>设置 ILiteCollection`1.Min(BsonExpression keySelector) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteCollection`1.MinOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},``0})">
            <summary>设置 Min(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的存根</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteCollection`1.LiteDB#ILiteCollection{T}#Name">
            <summary>设置 ILiteCollection`1.get_Name() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.NameGet">
            <summary>设置 ILiteCollection`1.get_Name() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.Query">
            <summary>设置 ILiteCollection`1.Query() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpdateBsonValueT0">
            <summary>设置 ILiteCollection`1.Update(BsonValue id, !0 entity) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpdateIEnumerableOfT0">
            <summary>设置 ILiteCollection`1.Update(IEnumerable`1&lt;!0&gt; entities) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpdateManyBsonExpressionBsonExpression">
            <summary>设置 ILiteCollection`1.UpdateMany(BsonExpression transform, BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpdateManyExpressionOfFuncOfT0T0ExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteCollection`1.UpdateMany(Expression`1&lt;Func`2&lt;!0,!0&gt;&gt; extend, Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpdateT0">
            <summary>设置 ILiteCollection`1.Update(!0 entity) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpsertBsonValueT0">
            <summary>设置 ILiteCollection`1.Upsert(BsonValue id, !0 entity) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpsertIEnumerableOfT0">
            <summary>设置 ILiteCollection`1.Upsert(IEnumerable`1&lt;!0&gt; entities) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteCollection`1.UpsertT0">
            <summary>设置 ILiteCollection`1.Upsert(!0 entity) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubILiteDatabase">
            <summary>LiteDB.ILiteDatabase 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.#ctor">
            <summary>初始化 type StubILiteDatabase 的新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.AttachBackingFieldToCheckpointSize">
            <summary>附加委托以将 StubILiteDatabase.CheckpointSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.AttachBackingFieldToLimitSize">
            <summary>附加委托以将 StubILiteDatabase.LimitSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.AttachBackingFieldToTimeout">
            <summary>附加委托以将 StubILiteDatabase.Timeout 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.AttachBackingFieldToUserVersion">
            <summary>附加委托以将 StubILiteDatabase.UserVersion 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.AttachBackingFieldToUtcDate">
            <summary>附加委托以将 StubILiteDatabase.UtcDate 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.BeginTrans">
            <summary>设置 ILiteDatabase.BeginTrans() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.Checkpoint">
            <summary>设置 ILiteDatabase.Checkpoint() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#CheckpointSize">
            <summary>设置 ILiteDatabase.get_CheckpointSize() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.CheckpointSizeGet">
            <summary>设置 ILiteDatabase.get_CheckpointSize() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.CheckpointSizeSetInt32">
            <summary>设置 ILiteDatabase.set_CheckpointSize(Int32 value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Collation">
            <summary>设置 ILiteDatabase.get_Collation() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.CollationGet">
            <summary>设置 ILiteDatabase.get_Collation() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.CollectionExistsString">
            <summary>设置 ILiteDatabase.CollectionExists(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.Commit">
            <summary>设置 ILiteDatabase.Commit() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.DropCollectionString">
            <summary>设置 ILiteDatabase.DropCollection(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.ExecuteStringBsonDocument">
            <summary>设置 ILiteDatabase.Execute(String command, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.ExecuteStringBsonValueArray">
            <summary>设置 ILiteDatabase.Execute(String command, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.ExecuteTextReaderBsonDocument">
            <summary>设置 ILiteDatabase.Execute(TextReader commandReader, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#FileStorage">
            <summary>设置 ILiteDatabase.get_FileStorage() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.FileStorageGet">
            <summary>设置 ILiteDatabase.get_FileStorage() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.GetCollectionNames">
            <summary>设置 ILiteDatabase.GetCollectionNames() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.GetCollectionOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.ILiteCollection{``0}})">
            <summary>设置 GetCollection() 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.GetCollectionOf1BsonAutoId``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonAutoId,LiteDB.ILiteCollection{``0}})">
            <summary>设置 GetCollection(BsonAutoId autoId) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.GetCollectionOf1StringBsonAutoId``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,LiteDB.BsonAutoId,LiteDB.ILiteCollection{``0}})">
            <summary>设置 GetCollection(String name, BsonAutoId autoId) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.GetCollectionStringBsonAutoId">
            <summary>设置 ILiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.GetStorageOf1StringString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.String,LiteDB.ILiteStorage{``0}})">
            <summary>设置 GetStorage(String filesCollection, String chunksCollection) 的存根</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#LimitSize">
            <summary>设置 ILiteDatabase.get_LimitSize() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.LimitSizeGet">
            <summary>设置 ILiteDatabase.get_LimitSize() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.LimitSizeSetInt64">
            <summary>设置 ILiteDatabase.set_LimitSize(Int64 value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#BeginTrans">
            <summary>设置 ILiteDatabase.BeginTrans() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Checkpoint">
            <summary>设置 ILiteDatabase.Checkpoint() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#CollectionExists(System.String)">
            <summary>设置 ILiteDatabase.CollectionExists(String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Commit">
            <summary>设置 ILiteDatabase.Commit() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#DropCollection(System.String)">
            <summary>设置 ILiteDatabase.DropCollection(String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Execute(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteDatabase.Execute(String command, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Execute(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteDatabase.Execute(String command, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Execute(System.IO.TextReader,LiteDB.BsonDocument)">
            <summary>设置 ILiteDatabase.Execute(TextReader commandReader, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#GetCollection``1">
            <summary>设置 ILiteDatabase.GetCollection() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#GetCollection(System.String,LiteDB.BsonAutoId)">
            <summary>设置 ILiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#GetCollection``1(LiteDB.BsonAutoId)">
            <summary>设置 ILiteDatabase.GetCollection(BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#GetCollection``1(System.String,LiteDB.BsonAutoId)">
            <summary>设置 ILiteDatabase.GetCollection(String name, BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#GetCollectionNames">
            <summary>设置 ILiteDatabase.GetCollectionNames() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#GetStorage``1(System.String,System.String)">
            <summary>设置 ILiteDatabase.GetStorage(String filesCollection, String chunksCollection) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Pragma(System.String)">
            <summary>设置 ILiteDatabase.Pragma(String name) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Pragma(System.String,LiteDB.BsonValue)">
            <summary>设置 ILiteDatabase.Pragma(String name, BsonValue value) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Rebuild(LiteDB.Engine.RebuildOptions)">
            <summary>设置 ILiteDatabase.Rebuild(RebuildOptions options) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#RenameCollection(System.String,System.String)">
            <summary>设置 ILiteDatabase.RenameCollection(String oldName, String newName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Rollback">
            <summary>设置 ILiteDatabase.Rollback() 的 存根</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Mapper">
            <summary>设置 ILiteDatabase.get_Mapper() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.MapperGet">
            <summary>设置 ILiteDatabase.get_Mapper() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.PragmaString">
            <summary>设置 ILiteDatabase.Pragma(String name) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.PragmaStringBsonValue">
            <summary>设置 ILiteDatabase.Pragma(String name, BsonValue value) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.RebuildRebuildOptions">
            <summary>设置 ILiteDatabase.Rebuild(RebuildOptions options) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.RenameCollectionStringString">
            <summary>设置 ILiteDatabase.RenameCollection(String oldName, String newName) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.Rollback">
            <summary>设置 ILiteDatabase.Rollback() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteDatabase.System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#Timeout">
            <summary>设置 ILiteDatabase.get_Timeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.TimeoutGet">
            <summary>设置 ILiteDatabase.get_Timeout() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.TimeoutSetTimeSpan">
            <summary>设置 ILiteDatabase.set_Timeout(TimeSpan value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#UserVersion">
            <summary>设置 ILiteDatabase.get_UserVersion() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.UserVersionGet">
            <summary>设置 ILiteDatabase.get_UserVersion() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.UserVersionSetInt32">
            <summary>设置 ILiteDatabase.set_UserVersion(Int32 value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteDatabase.LiteDB#ILiteDatabase#UtcDate">
            <summary>设置 ILiteDatabase.get_UtcDate() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.UtcDateGet">
            <summary>设置 ILiteDatabase.get_UtcDate() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteDatabase.UtcDateSetBoolean">
            <summary>设置 ILiteDatabase.set_UtcDate(Boolean value) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubILiteQueryable`1">
            <summary>LiteDB.ILiteQueryable`1 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.#ctor">
            <summary>初始化 type StubILiteQueryable 的新实例</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.Count">
            <summary>设置 ILiteQueryableResult`1.Count() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.ExecuteReader">
            <summary>设置 ILiteQueryableResult`1.ExecuteReader() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.Exists">
            <summary>设置 ILiteQueryableResult`1.Exists() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.First">
            <summary>设置 ILiteQueryableResult`1.First() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.FirstOrDefault">
            <summary>设置 ILiteQueryableResult`1.FirstOrDefault() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.ForUpdate">
            <summary>设置 ILiteQueryableResult`1.ForUpdate() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.GetPlan">
            <summary>设置 ILiteQueryableResult`1.GetPlan() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.GroupByBsonExpression">
            <summary>设置 ILiteQueryable`1.GroupBy(BsonExpression keySelector) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.HavingBsonExpression">
            <summary>设置 ILiteQueryable`1.Having(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.IncludeBsonExpression">
            <summary>设置 ILiteQueryable`1.Include(BsonExpression path) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.IncludeListOfBsonExpression">
            <summary>设置 ILiteQueryable`1.Include(List`1&lt;BsonExpression&gt; paths) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.IncludeOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryable{`0}})">
            <summary>设置 Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; path) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.IntoStringBsonAutoId">
            <summary>设置 ILiteQueryableResult`1.Into(String newCollection, BsonAutoId autoId) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.LimitInt32">
            <summary>设置 ILiteQueryableResult`1.Limit(Int32 limit) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Count">
            <summary>设置 ILiteQueryableResult`1.Count() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#ExecuteReader">
            <summary>设置 ILiteQueryableResult`1.ExecuteReader() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Exists">
            <summary>设置 ILiteQueryableResult`1.Exists() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#First">
            <summary>设置 ILiteQueryableResult`1.First() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#FirstOrDefault">
            <summary>设置 ILiteQueryableResult`1.FirstOrDefault() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#ForUpdate">
            <summary>设置 ILiteQueryableResult`1.ForUpdate() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#GetPlan">
            <summary>设置 ILiteQueryableResult`1.GetPlan() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Into(System.String,LiteDB.BsonAutoId)">
            <summary>设置 ILiteQueryableResult`1.Into(String newCollection, BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Limit(System.Int32)">
            <summary>设置 ILiteQueryableResult`1.Limit(Int32 limit) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#LongCount">
            <summary>设置 ILiteQueryableResult`1.LongCount() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Offset(System.Int32)">
            <summary>设置 ILiteQueryableResult`1.Offset(Int32 offset) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Single">
            <summary>设置 ILiteQueryableResult`1.Single() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#SingleOrDefault">
            <summary>设置 ILiteQueryableResult`1.SingleOrDefault() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#Skip(System.Int32)">
            <summary>设置 ILiteQueryableResult`1.Skip(Int32 offset) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#ToArray">
            <summary>设置 ILiteQueryableResult`1.ToArray() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#ToDocuments">
            <summary>设置 ILiteQueryableResult`1.ToDocuments() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#ToEnumerable">
            <summary>设置 ILiteQueryableResult`1.ToEnumerable() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryableResult{T}#ToList">
            <summary>设置 ILiteQueryableResult`1.ToList() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#GroupBy(LiteDB.BsonExpression)">
            <summary>设置 ILiteQueryable`1.GroupBy(BsonExpression keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Having(LiteDB.BsonExpression)">
            <summary>设置 ILiteQueryable`1.Having(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Include(LiteDB.BsonExpression)">
            <summary>设置 ILiteQueryable`1.Include(BsonExpression path) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>设置 ILiteQueryable`1.Include(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; path) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Include(System.Collections.Generic.List{LiteDB.BsonExpression})">
            <summary>设置 ILiteQueryable`1.Include(List`1&lt;BsonExpression&gt; paths) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#OrderBy(LiteDB.BsonExpression,System.Int32)">
            <summary>设置 ILiteQueryable`1.OrderBy(BsonExpression keySelector, Int32 order) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
            <summary>设置 ILiteQueryable`1.OrderBy(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Int32 order) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#OrderByDescending(LiteDB.BsonExpression)">
            <summary>设置 ILiteQueryable`1.OrderByDescending(BsonExpression keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>设置 ILiteQueryable`1.OrderByDescending(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>设置 ILiteQueryable`1.Select(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; selector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Select(LiteDB.BsonExpression)">
            <summary>设置 ILiteQueryable`1.Select(BsonExpression selector) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Where(LiteDB.BsonExpression)">
            <summary>设置 ILiteQueryable`1.Where(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 ILiteQueryable`1.Where(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Where(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteQueryable`1.Where(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.LiteDB#ILiteQueryable{T}#Where(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteQueryable`1.Where(String predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.LongCount">
            <summary>设置 ILiteQueryableResult`1.LongCount() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.OffsetInt32">
            <summary>设置 ILiteQueryableResult`1.Offset(Int32 offset) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.OrderByBsonExpressionInt32">
            <summary>设置 ILiteQueryable`1.OrderBy(BsonExpression keySelector, Int32 order) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.OrderByDescendingBsonExpression">
            <summary>设置 ILiteQueryable`1.OrderByDescending(BsonExpression keySelector) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.OrderByDescendingOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryable{`0}})">
            <summary>设置 OrderByDescending(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.OrderByOf1ExpressionOfFuncOfT0M0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,LiteDB.ILiteQueryable{`0}})">
            <summary>设置 OrderBy(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; keySelector, Int32 order) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.SelectBsonExpression">
            <summary>设置 ILiteQueryable`1.Select(BsonExpression selector) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryable`1.SelectOf1ExpressionOfFuncOfT0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{`0,``0}},LiteDB.ILiteQueryableResult{``0}})">
            <summary>设置 Select(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; selector) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.Single">
            <summary>设置 ILiteQueryableResult`1.Single() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.SingleOrDefault">
            <summary>设置 ILiteQueryableResult`1.SingleOrDefault() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.SkipInt32">
            <summary>设置 ILiteQueryableResult`1.Skip(Int32 offset) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.ToArray">
            <summary>设置 ILiteQueryableResult`1.ToArray() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.ToDocuments">
            <summary>设置 ILiteQueryableResult`1.ToDocuments() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.ToEnumerable">
            <summary>设置 ILiteQueryableResult`1.ToEnumerable() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.ToList">
            <summary>设置 ILiteQueryableResult`1.ToList() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.WhereBsonExpression">
            <summary>设置 ILiteQueryable`1.Where(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.WhereExpressionOfFuncOfT0Boolean">
            <summary>设置 ILiteQueryable`1.Where(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.WhereStringBsonDocument">
            <summary>设置 ILiteQueryable`1.Where(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryable`1.WhereStringBsonValueArray">
            <summary>设置 ILiteQueryable`1.Where(String predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubILiteQueryableResult`1">
            <summary>LiteDB.ILiteQueryableResult`1 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.#ctor">
            <summary>初始化 type StubILiteQueryableResult 的新实例</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.Count">
            <summary>设置 ILiteQueryableResult`1.Count() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.ExecuteReader">
            <summary>设置 ILiteQueryableResult`1.ExecuteReader() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.Exists">
            <summary>设置 ILiteQueryableResult`1.Exists() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.First">
            <summary>设置 ILiteQueryableResult`1.First() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.FirstOrDefault">
            <summary>设置 ILiteQueryableResult`1.FirstOrDefault() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.ForUpdate">
            <summary>设置 ILiteQueryableResult`1.ForUpdate() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.GetPlan">
            <summary>设置 ILiteQueryableResult`1.GetPlan() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.IntoStringBsonAutoId">
            <summary>设置 ILiteQueryableResult`1.Into(String newCollection, BsonAutoId autoId) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.LimitInt32">
            <summary>设置 ILiteQueryableResult`1.Limit(Int32 limit) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Count">
            <summary>设置 ILiteQueryableResult`1.Count() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#ExecuteReader">
            <summary>设置 ILiteQueryableResult`1.ExecuteReader() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Exists">
            <summary>设置 ILiteQueryableResult`1.Exists() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#First">
            <summary>设置 ILiteQueryableResult`1.First() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#FirstOrDefault">
            <summary>设置 ILiteQueryableResult`1.FirstOrDefault() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#ForUpdate">
            <summary>设置 ILiteQueryableResult`1.ForUpdate() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#GetPlan">
            <summary>设置 ILiteQueryableResult`1.GetPlan() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Into(System.String,LiteDB.BsonAutoId)">
            <summary>设置 ILiteQueryableResult`1.Into(String newCollection, BsonAutoId autoId) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Limit(System.Int32)">
            <summary>设置 ILiteQueryableResult`1.Limit(Int32 limit) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#LongCount">
            <summary>设置 ILiteQueryableResult`1.LongCount() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Offset(System.Int32)">
            <summary>设置 ILiteQueryableResult`1.Offset(Int32 offset) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Single">
            <summary>设置 ILiteQueryableResult`1.Single() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#SingleOrDefault">
            <summary>设置 ILiteQueryableResult`1.SingleOrDefault() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#Skip(System.Int32)">
            <summary>设置 ILiteQueryableResult`1.Skip(Int32 offset) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#ToArray">
            <summary>设置 ILiteQueryableResult`1.ToArray() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#ToDocuments">
            <summary>设置 ILiteQueryableResult`1.ToDocuments() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#ToEnumerable">
            <summary>设置 ILiteQueryableResult`1.ToEnumerable() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteQueryableResult`1.LiteDB#ILiteQueryableResult{T}#ToList">
            <summary>设置 ILiteQueryableResult`1.ToList() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.LongCount">
            <summary>设置 ILiteQueryableResult`1.LongCount() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.OffsetInt32">
            <summary>设置 ILiteQueryableResult`1.Offset(Int32 offset) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.Single">
            <summary>设置 ILiteQueryableResult`1.Single() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.SingleOrDefault">
            <summary>设置 ILiteQueryableResult`1.SingleOrDefault() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.SkipInt32">
            <summary>设置 ILiteQueryableResult`1.Skip(Int32 offset) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.ToArray">
            <summary>设置 ILiteQueryableResult`1.ToArray() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.ToDocuments">
            <summary>设置 ILiteQueryableResult`1.ToDocuments() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.ToEnumerable">
            <summary>设置 ILiteQueryableResult`1.ToEnumerable() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteQueryableResult`1.ToList">
            <summary>设置 ILiteQueryableResult`1.ToList() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubILiteRepository">
            <summary>LiteDB.ILiteRepository 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.#ctor">
            <summary>初始化 type StubILiteRepository 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Database">
            <summary>设置 ILiteRepository.get_Database() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteRepository.DatabaseGet">
            <summary>设置 ILiteRepository.get_Database() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.DeleteManyOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,System.Int32})">
            <summary>设置 DeleteMany(BsonExpression predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.DeleteManyOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Int32})">
            <summary>设置 DeleteMany(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.DeleteOf1BsonValueString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonValue,System.String,System.Boolean})">
            <summary>设置 Delete(BsonValue id, String collectionName) 的存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteRepository.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.EnsureIndexOf1BsonExpressionBooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.Boolean,System.String,System.Boolean})">
            <summary>设置 EnsureIndex(BsonExpression expression, Boolean unique, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.EnsureIndexOf1StringBsonExpressionBooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,LiteDB.BsonExpression,System.Boolean,System.String,System.Boolean})">
            <summary>设置 EnsureIndex(String name, BsonExpression expression, Boolean unique, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.EnsureIndexOf2ExpressionOfFuncOfM0M1BooleanString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String,System.Boolean})">
            <summary>设置 EnsureIndex(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.EnsureIndexOf2StringExpressionOfFuncOfM0M1BooleanString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String,System.Boolean})">
            <summary>设置 EnsureIndex(String name, Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.FetchOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,System.Collections.Generic.List{``0}})">
            <summary>设置 Fetch(BsonExpression predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.FetchOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Collections.Generic.List{``0}})">
            <summary>设置 Fetch(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.FirstOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 First(BsonExpression predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.FirstOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 First(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.FirstOrDefaultOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 FirstOrDefault(BsonExpression predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.FirstOrDefaultOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 FirstOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.InsertOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 Insert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.InsertOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,LiteDB.BsonValue})">
            <summary>设置 Insert(!!0 entity, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Delete``1(LiteDB.BsonValue,System.String)">
            <summary>设置 ILiteRepository.Delete(BsonValue id, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#DeleteMany``1(LiteDB.BsonExpression,System.String)">
            <summary>设置 ILiteRepository.DeleteMany(BsonExpression predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#DeleteMany``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>设置 ILiteRepository.DeleteMany(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#EnsureIndex``1(LiteDB.BsonExpression,System.Boolean,System.String)">
            <summary>设置 ILiteRepository.EnsureIndex(BsonExpression expression, Boolean unique, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#EnsureIndex``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>设置 ILiteRepository.EnsureIndex(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#EnsureIndex``1(System.String,LiteDB.BsonExpression,System.Boolean,System.String)">
            <summary>设置 ILiteRepository.EnsureIndex(String name, BsonExpression expression, Boolean unique, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#EnsureIndex``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>设置 ILiteRepository.EnsureIndex(String name, Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector, Boolean unique, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Fetch``1(LiteDB.BsonExpression,System.String)">
            <summary>设置 ILiteRepository.Fetch(BsonExpression predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Fetch``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>设置 ILiteRepository.Fetch(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#First``1(LiteDB.BsonExpression,System.String)">
            <summary>设置 ILiteRepository.First(BsonExpression predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>设置 ILiteRepository.First(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#FirstOrDefault``1(LiteDB.BsonExpression,System.String)">
            <summary>设置 ILiteRepository.FirstOrDefault(BsonExpression predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>设置 ILiteRepository.FirstOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Insert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>设置 ILiteRepository.Insert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Insert``1(``0,System.String)">
            <summary>设置 ILiteRepository.Insert(!!0 entity, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Query``1(System.String)">
            <summary>设置 ILiteRepository.Query(String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Single``1(LiteDB.BsonExpression,System.String)">
            <summary>设置 ILiteRepository.Single(BsonExpression predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Single``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>设置 ILiteRepository.Single(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#SingleById``1(LiteDB.BsonValue,System.String)">
            <summary>设置 ILiteRepository.SingleById(BsonValue id, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#SingleOrDefault``1(LiteDB.BsonExpression,System.String)">
            <summary>设置 ILiteRepository.SingleOrDefault(BsonExpression predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>设置 ILiteRepository.SingleOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Update``1(``0,System.String)">
            <summary>设置 ILiteRepository.Update(!!0 entity, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Update``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>设置 ILiteRepository.Update(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Upsert``1(``0,System.String)">
            <summary>设置 ILiteRepository.Upsert(!!0 entity, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.LiteDB#ILiteRepository#Upsert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>设置 ILiteRepository.Upsert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.QueryOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,LiteDB.ILiteQueryable{``0}})">
            <summary>设置 Query(String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.SingleByIdOf1BsonValueString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonValue,System.String,``0})">
            <summary>设置 SingleById(BsonValue id, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.SingleOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 Single(BsonExpression predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.SingleOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 Single(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.SingleOrDefaultOf1BsonExpressionString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LiteDB.BsonExpression,System.String,``0})">
            <summary>设置 SingleOrDefault(BsonExpression predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.SingleOrDefaultOf1ExpressionOfFuncOfM0BooleanString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,``0})">
            <summary>设置 SingleOrDefault(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.UpdateOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 Update(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.UpdateOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,System.Boolean})">
            <summary>设置 Update(!!0 entity, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.UpsertOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.String,System.Int32})">
            <summary>设置 Upsert(IEnumerable`1&lt;!!0&gt; entities, String collectionName) 的存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteRepository.UpsertOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String,System.Boolean})">
            <summary>设置 Upsert(!!0 entity, String collectionName) 的存根</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubILiteStorage`1">
            <summary>LiteDB.ILiteStorage`1 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.#ctor">
            <summary>初始化 type StubILiteStorage 的新实例</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.DeleteT0">
            <summary>设置 ILiteStorage`1.Delete(!0 id) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.DownloadT0Stream">
            <summary>设置 ILiteStorage`1.Download(!0 id, Stream stream) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.DownloadT0StringBoolean">
            <summary>设置 ILiteStorage`1.Download(!0 id, String filename, Boolean overwritten) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.ExistsT0">
            <summary>设置 ILiteStorage`1.Exists(!0 id) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.FindAll">
            <summary>设置 ILiteStorage`1.FindAll() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.FindBsonExpression">
            <summary>设置 ILiteStorage`1.Find(BsonExpression predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.FindByIdT0">
            <summary>设置 ILiteStorage`1.FindById(!0 id) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.FindExpressionOfFuncOfLiteFileInfoOfT0Boolean">
            <summary>设置 ILiteStorage`1.Find(Expression`1&lt;Func`2&lt;LiteFileInfo`1&lt;!0&gt;,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.FindStringBsonDocument">
            <summary>设置 ILiteStorage`1.Find(String predicate, BsonDocument parameters) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.FindStringBsonValueArray">
            <summary>设置 ILiteStorage`1.Find(String predicate, BsonValue[] args) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Delete(`0)">
            <summary>设置 ILiteStorage`1.Delete(!0 id) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Download(`0,System.IO.Stream)">
            <summary>设置 ILiteStorage`1.Download(!0 id, Stream stream) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Download(`0,System.String,System.Boolean)">
            <summary>设置 ILiteStorage`1.Download(!0 id, String filename, Boolean overwritten) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Exists(`0)">
            <summary>设置 ILiteStorage`1.Exists(!0 id) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Find(LiteDB.BsonExpression)">
            <summary>设置 ILiteStorage`1.Find(BsonExpression predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Find(System.Linq.Expressions.Expression{System.Func{LiteDB.LiteFileInfo{`0},System.Boolean}})">
            <summary>设置 ILiteStorage`1.Find(Expression`1&lt;Func`2&lt;LiteFileInfo`1&lt;!0&gt;,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Find(System.String,LiteDB.BsonValue[])">
            <summary>设置 ILiteStorage`1.Find(String predicate, BsonValue[] args) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Find(System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteStorage`1.Find(String predicate, BsonDocument parameters) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#FindAll">
            <summary>设置 ILiteStorage`1.FindAll() 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#FindById(`0)">
            <summary>设置 ILiteStorage`1.FindById(!0 id) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#OpenRead(`0)">
            <summary>设置 ILiteStorage`1.OpenRead(!0 id) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#OpenWrite(`0,System.String,LiteDB.BsonDocument)">
            <summary>设置 ILiteStorage`1.OpenWrite(!0 id, String filename, BsonDocument metadata) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#SetMetadata(`0,LiteDB.BsonDocument)">
            <summary>设置 ILiteStorage`1.SetMetadata(!0 id, BsonDocument metadata) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Upload(`0,System.String)">
            <summary>设置 ILiteStorage`1.Upload(!0 id, String filename) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubILiteStorage`1.LiteDB#ILiteStorage{TFileId}#Upload(`0,System.String,System.IO.Stream,LiteDB.BsonDocument)">
            <summary>设置 ILiteStorage`1.Upload(!0 id, String filename, Stream stream, BsonDocument metadata) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.OpenReadT0">
            <summary>设置 ILiteStorage`1.OpenRead(!0 id) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.OpenWriteT0StringBsonDocument">
            <summary>设置 ILiteStorage`1.OpenWrite(!0 id, String filename, BsonDocument metadata) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.SetMetadataT0BsonDocument">
            <summary>设置 ILiteStorage`1.SetMetadata(!0 id, BsonDocument metadata) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.UploadT0String">
            <summary>设置 ILiteStorage`1.Upload(!0 id, String filename) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubILiteStorage`1.UploadT0StringStreamBsonDocument">
            <summary>设置 ILiteStorage`1.Upload(!0 id, String filename, Stream stream, BsonDocument metadata) 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubITypeNameBinder">
            <summary>LiteDB.ITypeNameBinder 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubITypeNameBinder.#ctor">
            <summary>初始化 type StubITypeNameBinder 的新实例</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubITypeNameBinder.GetNameType">
            <summary>设置 ITypeNameBinder.GetName(Type type) 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubITypeNameBinder.GetTypeString">
            <summary>设置 ITypeNameBinder.GetType(String name) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubITypeNameBinder.LiteDB#ITypeNameBinder#GetName(System.Type)">
            <summary>设置 ITypeNameBinder.GetName(Type type) 的 存根</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubITypeNameBinder.LiteDB#ITypeNameBinder#GetType(System.String)">
            <summary>设置 ITypeNameBinder.GetType(String name) 的 存根</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubJsonReader">
            <summary>LiteDB.JsonReader 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubJsonReader.#ctor(System.IO.TextReader)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubJsonReader.InitializeStub">
            <summary>初始化 type StubJsonReader 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubJsonSerializer">
            <summary>LiteDB.JsonSerializer 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubJsonSerializer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonSerializer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubJsonSerializer.InitializeStub">
            <summary>初始化 type StubJsonSerializer 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonSerializer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonSerializer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubJsonWriter">
            <summary>LiteDB.JsonWriter 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubJsonWriter.#ctor(System.IO.TextWriter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonWriter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubJsonWriter.InitializeStub">
            <summary>初始化 type StubJsonWriter 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonWriter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubJsonWriter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubLiteDatabase">
            <summary>LiteDB.LiteDatabase 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteDatabase.#ctor(LiteDB.ConnectionString,LiteDB.BsonMapper)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteDatabase.#ctor(System.String,LiteDB.BsonMapper)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteDatabase.#ctor(LiteDB.Engine.ILiteEngine,LiteDB.BsonMapper,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteDatabase.#ctor(System.IO.Stream,LiteDB.BsonMapper,System.IO.Stream)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteDatabase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteDatabase.Dispose(System.Boolean)">
            <summary>设置 LiteDatabase.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteDatabase.DisposeBoolean">
            <summary>设置 LiteDatabase.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteDatabase.InitializeStub">
            <summary>初始化 type StubLiteDatabase 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteDatabase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteDatabase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubLiteException">
            <summary>LiteDB.LiteException 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.#ctor(System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubLiteException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubLiteException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.InitializeStub">
            <summary>初始化 type StubLiteException 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubLiteFileInfo`1">
            <summary>LiteDB.LiteFileInfo`1 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteFileInfo`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteFileInfo`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteFileInfo`1.InitializeStub">
            <summary>初始化 type StubLiteFileInfo 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteFileInfo`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteFileInfo`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubLiteRepository">
            <summary>LiteDB.LiteRepository 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteRepository.#ctor(LiteDB.ILiteDatabase)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteRepository.#ctor(LiteDB.ConnectionString,LiteDB.BsonMapper)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteRepository.#ctor(System.String,LiteDB.BsonMapper)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteRepository.#ctor(System.IO.Stream,LiteDB.BsonMapper,System.IO.Stream)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteRepository.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteRepository.Dispose(System.Boolean)">
            <summary>设置 LiteRepository.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubLiteRepository.DisposeBoolean">
            <summary>设置 LiteRepository.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteRepository.InitializeStub">
            <summary>初始化 type StubLiteRepository 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteRepository.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteRepository.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubLiteStorage`1">
            <summary>LiteDB.LiteStorage`1 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteStorage`1.#ctor(LiteDB.ILiteDatabase,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteStorage`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubLiteStorage`1.InitializeStub">
            <summary>初始化 type StubLiteStorage 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteStorage`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubLiteStorage`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubMemberMapper">
            <summary>LiteDB.MemberMapper 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubMemberMapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubMemberMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubMemberMapper.InitializeStub">
            <summary>初始化 type StubMemberMapper 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubMemberMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubMemberMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubObjectId">
            <summary>LiteDB.ObjectId 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.#ctor(LiteDB.ObjectId)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.#ctor(System.Byte[],System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubObjectId.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.Equals(System.Object)">
            <summary>设置 ObjectId.Equals(Object other) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubObjectId.EqualsObject">
            <summary>设置 ObjectId.Equals(Object other) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.GetHashCode">
            <summary>设置 ObjectId.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubObjectId.GetHashCode01">
            <summary>设置 ObjectId.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.InitializeStub">
            <summary>初始化 type StubObjectId 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubObjectId.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubObjectId.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubObjectId.ToString">
            <summary>设置 ObjectId.ToString() 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubObjectId.ToString01">
            <summary>设置 ObjectId.ToString() 的 stub</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubQuery">
            <summary>LiteDB.Query 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubQuery.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubQuery.InitializeStub">
            <summary>初始化 type StubQuery 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubQueryAny">
            <summary>LiteDB.QueryAny 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubQueryAny.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubQueryAny.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubQueryAny.InitializeStub">
            <summary>初始化 type StubQueryAny 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubQueryAny.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubQueryAny.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubSharedDataReader">
            <summary>LiteDB.SharedDataReader 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubSharedDataReader.#ctor(LiteDB.IBsonDataReader,System.Action)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubSharedDataReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubSharedDataReader.Dispose(System.Boolean)">
            <summary>设置 SharedDataReader.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubSharedDataReader.DisposeBoolean">
            <summary>设置 SharedDataReader.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubSharedDataReader.InitializeStub">
            <summary>初始化 type StubSharedDataReader 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubSharedDataReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubSharedDataReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LiteDB.Fakes.StubSharedEngine">
            <summary>LiteDB.SharedEngine 的存根类型</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubSharedEngine.#ctor(LiteDB.Engine.EngineSettings)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubSharedEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubSharedEngine.Dispose(System.Boolean)">
            <summary>设置 SharedEngine.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LiteDB.Fakes.StubSharedEngine.DisposeBoolean">
            <summary>设置 SharedEngine.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LiteDB.Fakes.StubSharedEngine.InitializeStub">
            <summary>初始化 type StubSharedEngine 的新实例</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubSharedEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LiteDB.Fakes.StubSharedEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
